---
- name: Deploy Mistia-Nexus Services
  hosts: nexus
  become: yes
  vars_files:
    - secrets.yml
  vars:
    # This is the absolute path on the NAS where your docker-compose projects are located.
    deploy_path: "/volume2/docker/mistia-nexus"

    # This is the master list of all services managed by this playbook.
    # Each service has a name (which must match its directory name) and a list of tags.
    # The 'has_env' flag indicates that a .env file should be created for it from a template.
    all_services:
      - name: adguard-home
        tags: [core, dns]
      - name: caddy
        tags: [core, proxy]
        has_env: yes
      - name: portainer
        tags: [core, management]
      - name: duplicati
        tags: [core, backup]
        has_env: yes
      - name: tailscale
        tags: [core, network]
        has_env: yes
      - name: nextcloud
        tags: [cloud]
        has_env: yes

  tasks:
    #
    # This task ensures the code on the NAS is synchronized with your Git repository's main branch.
    # It runs every time, guaranteeing that all subsequent tasks use the latest configuration.
    #
    - name: "SETUP: Synchronize Git repository on NAS"
      tags: always
      ansible.builtin.git:
        repo: 'https://github.com/late4ever/Mistia-Labs.git'
        dest: "{{ deploy_path }}"
        version: main
        force: yes # Overwrites local changes to ensure a clean state
      become: no # Run this task as the git-cloning user 'late4ever'

    #
    # This block runs every time the playbook is executed.
    # It ensures the basic infrastructure (Docker network) is in place
    # before any services are deployed.
    #
    - name: "SETUP: Initial configuration"
      tags: always
      block:
        - name: Ensure proxy network exists with correct subnet
          community.docker.docker_network:
            name: mistia-proxy-net
            state: present
            ipam_config:
              - subnet: '172.21.0.0/16'

    #
    # This block handles reloading the Caddy proxy configuration without restarting the container.
    # It first validates the Caddyfile syntax and then triggers a graceful reload.
    # To execute this, run:
    #   ansible-playbook deploy_services.yml --tags proxy-reload --ask-vault-pass
    #
    - name: "ACTION: Validate and Reload Caddy Configuration"
      tags: [never, proxy-reload]
      block:
        - name: "Validate Caddyfile syntax"
          community.docker.docker_container_exec:
            container: caddy
            command: caddy validate --config /etc/caddy/Caddyfile

        - name: "Reload Caddy with new configuration"
          community.docker.docker_container_exec:
            container: caddy
            command: caddy reload --config /etc/caddy/Caddyfile
          changed_when: false

    #
    # This is the main deployment loop. It iterates over every service defined in 'all_services'.
    # For each service, it creates the .env (if needed), validates the compose file, deploys the container,
    # and verifies its health. A failure will trigger a warning and move to the next service.
    # Example to deploy only Nextcloud:
    #   ansible-playbook deploy_services.yml --tags nextcloud --ask-vault-pass
    #
    - name: "ACTION: DEPLOY AND VERIFY SERVICES"
      loop: "{{ all_services }}"
      loop_control:
        loop_var: service
      tags: "{{ [service.name] + service.tags }}"
      block:
        - name: "Create .env file for {{ service.name }} if required"
          ansible.builtin.template:
            src: "templates/{{ service.name }}.env.j2"
            dest: "{{ deploy_path }}/{{ service.name }}/.env"
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          when: service.has_env | default(false) | bool
          become: no

        - name: "Validate docker-compose.yml for {{ service.name }}"
          ansible.builtin.command:
            cmd: docker compose config
            chdir: "{{ deploy_path }}/{{ service.name }}"
          changed_when: false
          become: no

        - name: "Deploy {{ service.name }}"
          community.docker.docker_compose_v2:
            project_src: "{{ deploy_path }}/{{ service.name }}"
            state: present
            pulled: yes
            build: yes
          register: compose_result

        - name: "Wait for {{ service.name }} container to become healthy"
          when: compose_result.changed
          community.docker.docker_container_info:
            name: "{{ service.name }}"
          register: container_info
          until: "container_info.container.State.Health.Status is defined and container_info.container.State.Health.Status == 'healthy'"
          retries: 24
          delay: 10
      rescue:
        - name: "WARNING: Deployment of {{ service.name }} failed!"
          ansible.builtin.debug:
            msg: "The service {{ service.name }} failed to start or become healthy. Please check logs with 'docker logs {{ service.name }}'."
