# This file contains the body of the deployment loop.
# It is called by deploy-services.yml for each item in the 'all_services' list.
- name: 'ACTION: Run deployment for {{ service.name }}.'
  tags: '{{ [service.name] + service.tags }}'
  block:
    - name: 'SETUP: Create .env file for {{ service.name }}.'
      ansible.builtin.template:
        src: 'templates/{{ service.name }}.env.j2'
        dest: '{{ deploy_path }}/{{ service.name }}/.env'
        mode: '0644'
        owner: '{{ ansible_user }}'
        group: 'admin'
      when: service.has_env
      become: no

    - name: 'ACTION: Deploy {{ service.name }}.'
      community.docker.docker_compose_v2:
        project_src: '{{ deploy_path }}/{{ service.name }}'
        state: present
        build: "{{ 'always' if service.has_build | default(false) else 'never' }}"
        pull: "{{ 'always' if not service.has_build | default(false) else 'never' }}"
      register: compose_result
      failed_when: compose_result.failed or (compose_result.rc is defined and compose_result.rc != 0)
      become: no

    - name: 'VERIFY: Handle deployment failure for {{ service.name }}.'
      ansible.builtin.fail:
        msg: >
          Deployment failed for {{ service.name }}.
          {% if critical in (service.tags | default([])) %}Aborting play.{% else %}Skipping health check and continuing.{% endif %}
      when:
        - compose_result.failed or (compose_result.rc is defined and compose_result.rc != 0)

    - name: 'VERIFY: Wait for {{ service.name }} container to become healthy.'
      when: compose_result.changed
      community.docker.docker_container_info:
        name: '{{ service.name }}'
      register: container_info
      until: "container_info.container.State.Health.Status is defined and container_info.container.State.Health.Status == 'healthy'"
      retries: 40
      delay: 3
      become: no

    - name: 'VERIFY: Abort play if critical service failed health check.'
      meta: end_play
      when:
        - compose_result.changed
        - (container_info is not skipped) and (container_info is failed or (container_info.container.State.Health.Status is defined and container_info.container.State.Health.Status != 'healthy'))
        - critical in (service.tags | default([]))

  rescue:
    - name: 'WARNING: Deployment of {{ service.name }} failed!'
      ansible.builtin.debug:
        msg: "The service {{ service.name }} failed to start or become healthy. Please check logs with 'docker logs {{ service.name }}'."