# This file contains the body of the deployment loop
# It is called by deploy.yml for each item in the 'all_services' list
- name: 'ACTION: Deploy {{ service.name }}'
  tags: '{{ [service.name] + service.tags }}'
  block:
    - name: 'SETUP: .env File for {{ service.name }}'
      ansible.builtin.template:
        src: 'templates/{{ service.name }}.env.j2'
        dest: '{{ deploy_path }}/{{ service.name }}/.env'
        mode: '0644'
        owner: '{{ ansible_user }}'
        group: 'admin'
      when: service.has_env
      become: no

    - name: 'ACTION: Deploy {{ service.name }}'
      community.docker.docker_compose_v2:
        project_src: '{{ deploy_path }}/{{ service.name }}'
        state: present
        build: "{{ 'always' if service.has_build | default(false) else 'never' }}"
        pull: "{{ 'always' if not service.has_build | default(false) else 'never' }}"
      become: no

  rescue:
    - name: 'RESCUE: {{ service.name }} Deployment Failure'
      vars:
        # Determine the failure reason and craft a concise message
        failure_reason: >-
          {% if compose_result is defined and compose_result.failed %}
          Docker Compose deployment failed. Error: {{ compose_result.stderr | default(compose_result.stdout) | default('No specific error message available') }}
          {% else %}
          An unknown error occurred during deployment
          {% endif %}

        # Construct the final message based on whether the service is critical
        final_msg: >-
          {% if 'critical' in (service.tags | default([])) %}
          [CRITICAL] {{ failure_reason }} Aborting play
          {% else %}
          [WARNING] {{ failure_reason }} Continuing play
          {% endif %}
      block:
        - name: 'FAIL: CRITICAL service {{ service.name }}'
          ansible.builtin.fail:
            msg: '{{ final_msg }}'
          when: "'critical' in (service.tags | default([]))"

        - name: 'WARN: NON-CRITICAL service {{ service.name }}'
          ansible.builtin.debug:
            msg: '{{ final_msg }}'
          when: "'critical' not in (service.tags | default([]))"
