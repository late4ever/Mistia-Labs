---
# Example to run this playbook for all services:
#   ansible-playbook deploy-services.yml
#
# Example to run for only DNS-tagged services:
#   ansible-playbook deploy-services.yml --tags dns
#
# Example to run for only a specific service (e.g., caddy):
#   ansible-playbook deploy-services.yml --tags caddy
#
# Example when adding new service, reload Caddy and deploy new service:
#   ansible-playbook deploy-services.yml --tags proxy-reload, jelly
- name: Deploy Mistia-Nexus Services
  hosts: nexus
  become: yes
  vars_files:
    - secrets.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3.11
    repo_root_path: '/volume2/docker'
    deploy_path: '{{ repo_root_path }}/mistia-nexus'

    # This is the master list of all services managed by this playbook.
    all_services:
      # --8<-- [start:adguard-home]
      - name: adguard-home
        tags: [critical, dns]
        has_env: false
        has_build: false
      # --8<-- [end:adguard-home]

      # --8<-- [start:caddy]
      - name: caddy
        tags: [critical, core, proxy]
        has_env: true
        has_build: true
      # --8<-- [end:caddy]

      # --8<-- [start:portainer]
      - name: portainer
        tags: [core, management]
        has_env: false
        has_build: false
      # --8<-- [end:portainer]

      # --8<-- [start:duplicati]
      - name: duplicati
        tags: [core, backup]
        has_env: true
        has_build: false
      # --8<-- [end:duplicati]

      # --8<-- [start:tailscale]
      - name: tailscale
        tags: [core, vpn]
        has_env: true
        has_build: false
      # --8<-- [end:tailscale]

      # --8<-- [start:nextcloud]
      - name: nextcloud
        tags: [cloud]
        has_env: true
        has_build: true
      # --8<-- [end:nextcloud]

  pre_tasks:
    - name: 'VERIFY: Check for .git directory existence.'
      ansible.builtin.stat:
        path: '{{ repo_root_path }}/.git'
      register: git_dir_stat

    - name: 'FAIL: Abort if .git directory does not exist.'
      ansible.builtin.fail:
        msg: 'No .git directory found in {{ repo_root_path }}. Is this a git repo?'
      when: not git_dir_stat.stat.exists

    - name: 'VERIFY: Check if deploy_path exists.'
      ansible.builtin.stat:
        path: '{{ deploy_path }}'
      register: deploy_path_stat

    - name: 'FAIL: Abort if deploy_path does not exist.'
      ansible.builtin.fail:
        msg: 'deploy_path {{ deploy_path }} does not exist on the target host.'
      when: not deploy_path_stat.stat.exists

  tasks:
    # This task ensures the code on the NAS is synchronized with your Git repository.
    # It pulls the latest changes and hard resets to origin/main.
    - name: 'ACTION: Synchronize Git repository on NAS.'
      ansible.builtin.shell: |
        set -e
        git fetch origin
        git reset --hard origin/main
        chmod +x ./scripts/*.sh
      args:
        chdir: '{{ deploy_path }}'
      become: no

    # This block ensures the basic Docker network is in place.
    - name: 'SETUP: Initial Docker network configuration.'
      block:
        - name: 'Ensure proxy network exists with correct subnet.'
          community.docker.docker_network:
            name: mistia-proxy-net
            state: present
            ipam_config:
              - subnet: '172.21.0.0/16'

    # This block handles reloading the Caddy proxy configuration after changes.
    - name: 'ACTION: Validate and Reload Caddy Configuration.'
      tags: [never, proxy-reload]
      block:
        - name: 'Validate Caddyfile syntax.'
          community.docker.docker_container_exec:
            container: caddy
            command: caddy validate --config /etc/caddy/Caddyfile

        - name: 'Reload Caddy with new configuration.'
          community.docker.docker_container_exec:
            container: caddy
            command: caddy reload --config /etc/caddy/Caddyfile
          changed_when: false

    # This is the main deployment loop. It iterates over 'all_services' and
    # calls the separate loop file for each item, allowing for complex actions per service.
    - name: 'ACTION: Deploy and Verify Services.'
      ansible.builtin.include_tasks: _deploy-service-loop.yml
      loop: '{{ all_services }}'
      loop_control:
        loop_var: service
