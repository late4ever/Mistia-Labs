{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mistia Labs","text":"<p>Overview</p> <p>The official documentation site for the Mistia-Nexus homelab.</p>"},{"location":"#nexus-overview","title":"\ud83d\uddfa\ufe0f Nexus Overview","text":"<pre><code>graph TD\n    internet[\"\u2601\ufe0f Internet\"]\n\n    subgraph \"Mistia Network 192.168.50.0/24\"\n        direction TB\n        user[\"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddd2\ud83c\udffb Users\"]\n        router[\"\ud83c\udf10 Router&lt;br/&gt;192.168.50.1\"]\n\n        subgraph \"Mistia Nexus&lt;br/&gt;192.168.50.4\"\n            direction TB\n            subgraph \"mistia-proxy-net\"\n                caddy[\"\ud83d\udd00 Caddy Container\"]\n                portainer[\"\ud83d\udc33 Portainer\"]\n                duplicati[\"\ud83d\udcbe Duplicati\"]\n            end\n\n            subgraph \"macvlan Network\"\n                adguard[\"\ud83d\udee1\ufe0f AdGuard Home&lt;br/&gt;(192.168.50.2)\"]\n            end\n\n            macvlan_host[\"\ud83d\udd0c macvlan-host&lt;br/&gt;(192.168.50.3)\"]\n            host_os[\"\ud83d\udcbb Host OS\"]\n        end\n    end\n\n    internet -- \"WAN\" --&gt; router\n    user -- \"https://*.mistia.xyz\" --&gt; router\n    router -- \"Ports 80/443\" --&gt; caddy\n\n    caddy -- \"proxies to\" --&gt; adguard\n    caddy -- \"proxies to\" --&gt; duplicati\n    caddy -- \"proxies to\" --&gt; portainer\n\n    portainer -- \"DNS\" --&gt; adguard\n    duplicati -- \"DNS\" --&gt; adguard\n    host_os -- \"DNS via\" --&gt; macvlan_host\n    macvlan_host -- \"DNS\" --&gt; adguard\n</code></pre> <p>Mistia-Nexus is a lightweight, Docker-based homelab environment designed for the UGREEN NASync series.</p>"},{"location":"#hardware","title":"\ud83d\udd79\ufe0f Hardware","text":""},{"location":"#mistia-nexus","title":"Mistia Nexus","text":"Component Details  NAS UGREEN NASync DXP4800 Plus  RAM 2x 32GB Crucial DDR5-4800 SODIMM  NVMe 2TB Samsung 990 Pro (Apps)  HDD 2x 8TB WD Red Plus RAID 1 (Data)  Router ASUS ZenWiFi Pro ET12  Switch TP-LINK TL-SG105-M2 5-port 2.5Gbps"},{"location":"code-templates/caddyfile-snippets/","title":"Caddyfile Snippets","text":""},{"location":"code-templates/caddyfile-snippets/#overview","title":"Overview","text":"<p>This document provides reusable Caddyfile snippets and templates for common configurations in the Mistia-Nexus homelab environment.</p>"},{"location":"code-templates/caddyfile-snippets/#basic-service-template","title":"Basic Service Template","text":""},{"location":"code-templates/caddyfile-snippets/#standard-reverse-proxy","title":"Standard Reverse Proxy","text":"<pre><code># Basic reverse proxy for internal service\nservicename.yourdomain.com {\n    reverse_proxy servicename:8080\n\n    # Security headers\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options DENY\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy strict-origin-when-cross-origin\n    }\n\n    # Access logging\n    log {\n        output file /var/log/caddy/servicename.log\n        format json\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#service-with-authentication","title":"Service with Authentication","text":"<pre><code># Service with basic authentication\nprotected.yourdomain.com {\n    # Basic authentication\n    basicauth /* {\n        admin $2a$14$[bcrypt-hash-here]\n    }\n\n    reverse_proxy protected-service:8080\n\n    # Rate limiting for auth endpoints\n    rate_limit {\n        zone protected {\n            key {remote_host}\n            events 10\n            window 1m\n        }\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#security-snippets","title":"Security Snippets","text":""},{"location":"code-templates/caddyfile-snippets/#security-headers","title":"Security Headers","text":"<pre><code># Reusable security headers snippet\n(security_headers) {\n    header {\n        # Prevent MIME type sniffing\n        X-Content-Type-Options nosniff\n\n        # Prevent clickjacking\n        X-Frame-Options DENY\n\n        # XSS protection\n        X-XSS-Protection \"1; mode=block\"\n\n        # Referrer policy\n        Referrer-Policy strict-origin-when-cross-origin\n\n        # Content Security Policy (customize per service)\n        Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\"\n\n        # Strict Transport Security (HTTPS only)\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n\n        # Remove server identification\n        -Server\n    }\n}\n\n# Usage in service config:\nservice.yourdomain.com {\n    import security_headers\n    reverse_proxy service:8080\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Basic rate limiting\n(rate_limit_basic) {\n    rate_limit {\n        zone basic {\n            key {remote_host}\n            events 100\n            window 1m\n        }\n    }\n}\n\n# Strict rate limiting for sensitive services\n(rate_limit_strict) {\n    rate_limit {\n        zone strict {\n            key {remote_host}\n            events 10\n            window 1m\n        }\n    }\n}\n\n# API rate limiting\n(rate_limit_api) {\n    rate_limit {\n        zone api {\n            key {remote_host}\n            events 1000\n            window 1h\n        }\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#ip-restrictions","title":"IP Restrictions","text":"<pre><code># Local network only access\n(local_only) {\n    @notlocal {\n        not remote_ip 192.168.50.0/24\n        not remote_ip 127.0.0.1\n    }\n    respond @notlocal \"Access denied\" 403\n}\n\n# Admin IP restrictions\n(admin_only) {\n    @notadmin {\n        not remote_ip 192.168.50.100  # Admin workstation\n        not remote_ip 192.168.50.101  # Admin laptop\n    }\n    respond @notadmin \"Access denied\" 403\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#service-specific-snippets","title":"Service-Specific Snippets","text":""},{"location":"code-templates/caddyfile-snippets/#docker-management-portainer","title":"Docker Management (Portainer)","text":"<pre><code>portainer.yourdomain.com {\n    # Local network access only\n    @notlocal {\n        not remote_ip 192.168.50.0/24\n    }\n    respond @notlocal \"Access denied\" 403\n\n    reverse_proxy portainer:9000\n\n    # Enhanced security for management interface\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN  # Allow framing for embedded views\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy strict-origin-when-cross-origin\n        -Server\n    }\n\n    # Stricter rate limiting\n    rate_limit {\n        zone portainer {\n            key {remote_host}\n            events 50\n            window 1m\n        }\n    }\n\n    log {\n        output file /var/log/caddy/portainer.log\n        format json\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#dns-management-adguard-home","title":"DNS Management (AdGuard Home)","text":"<pre><code>adguard.yourdomain.com {\n    # Admin access only\n    @notadmin {\n        not remote_ip 192.168.50.100\n        not remote_ip 192.168.50.101\n    }\n    respond @notadmin \"Access denied\" 403\n\n    reverse_proxy adguard-home:3000\n\n    # Security headers\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options DENY\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy strict-origin-when-cross-origin\n        -Server\n    }\n\n    # Rate limiting for admin interface\n    rate_limit {\n        zone adguard {\n            key {remote_host}\n            events 20\n            window 1m\n        }\n    }\n\n    log {\n        output file /var/log/caddy/adguard.log\n        format json\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#backup-management-duplicati","title":"Backup Management (Duplicati)","text":"<pre><code>duplicati.yourdomain.com {\n    # Local network access only\n    @notlocal {\n        not remote_ip 192.168.50.0/24\n    }\n    respond @notlocal \"Access denied\" 403\n\n    reverse_proxy duplicati:8200\n\n    # Allow larger uploads for backup configurations\n    request_body {\n        max_size 100MB\n    }\n\n    # Extended timeout for backup operations\n    reverse_proxy duplicati:8200 {\n        timeout 300s\n    }\n\n    # Security headers\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options DENY\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy strict-origin-when-cross-origin\n        -Server\n    }\n\n    log {\n        output file /var/log/caddy/duplicati.log\n        format json\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#documentation-mkdocs","title":"Documentation (MkDocs)","text":"<pre><code>docs.yourdomain.com {\n    reverse_proxy mkdocs:8000\n\n    # Caching for static documentation\n    @static {\n        path *.css *.js *.png *.jpg *.gif *.ico *.woff *.woff2\n    }\n    header @static Cache-Control \"public, max-age=31536000, immutable\"\n\n    # Security headers (relaxed for documentation)\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN  # Allow embedding\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy strict-origin-when-cross-origin\n        -Server\n    }\n\n    # Generous rate limiting for documentation\n    rate_limit {\n        zone docs {\n            key {remote_host}\n            events 200\n            window 1m\n        }\n    }\n\n    log {\n        output file /var/log/caddy/docs.log\n        format json\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#development-snippets","title":"Development Snippets","text":""},{"location":"code-templates/caddyfile-snippets/#development-mode","title":"Development Mode","text":"<pre><code># Development configuration with relaxed security\n(dev_mode) {\n    # Allow CORS for development\n    header {\n        Access-Control-Allow-Origin \"*\"\n        Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\"\n        Access-Control-Allow-Headers \"Content-Type, Authorization\"\n    }\n\n    # Disable caching\n    header Cache-Control \"no-cache, no-store, must-revalidate\"\n\n    # Less strict rate limiting\n    rate_limit {\n        zone dev {\n            key {remote_host}\n            events 1000\n            window 1m\n        }\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#local-development","title":"Local Development","text":"<pre><code># Local development domains\n*.local {\n    tls internal\n\n    @adguard host adguard.local\n    handle @adguard {\n        reverse_proxy adguard-home:3000\n    }\n\n    @portainer host portainer.local\n    handle @portainer {\n        reverse_proxy portainer:9000\n    }\n\n    @duplicati host duplicati.local\n    handle @duplicati {\n        reverse_proxy duplicati:8200\n    }\n\n    @docs host docs.local\n    handle @docs {\n        reverse_proxy mkdocs:8000\n    }\n\n    # Default response\n    respond \"Service not found\" 404\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#advanced-configurations","title":"Advanced Configurations","text":""},{"location":"code-templates/caddyfile-snippets/#load-balancing","title":"Load Balancing","text":"<pre><code># Load balancing between multiple instances\nservice.yourdomain.com {\n    reverse_proxy {\n        to service1:8080\n        to service2:8080\n\n        # Health checks\n        health_uri /health\n        health_interval 30s\n        health_timeout 5s\n\n        # Load balancing method\n        lb_policy round_robin\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#websocket-support","title":"WebSocket Support","text":"<pre><code># Service with WebSocket support\nwebsocket-service.yourdomain.com {\n    reverse_proxy service:8080 {\n        # Enable WebSocket upgrades\n        upgrade_websocket\n\n        # Extended timeout for WebSocket connections\n        timeout 0\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#file-server","title":"File Server","text":"<pre><code># Static file server\nfiles.yourdomain.com {\n    root * /var/www/files\n    file_server browse\n\n    # Security for file server\n    header {\n        X-Content-Type-Options nosniff\n        X-Frame-Options DENY\n        -Server\n    }\n\n    # Prevent access to sensitive files\n    @sensitive {\n        path *.env *.key *.pem *.conf\n    }\n    respond @sensitive 403\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#ssltls-configurations","title":"SSL/TLS Configurations","text":""},{"location":"code-templates/caddyfile-snippets/#custom-ssl-configuration","title":"Custom SSL Configuration","text":"<pre><code># Custom TLS settings\nservice.yourdomain.com {\n    tls {\n        protocols tls1.2 tls1.3\n        ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        curves x25519 secp384r1\n    }\n\n    reverse_proxy service:8080\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#lets-encrypt-configuration","title":"Let\u2019s Encrypt Configuration","text":"<pre><code># Explicit Let's Encrypt configuration\nservice.yourdomain.com {\n    tls {\n        issuer acme {\n            dir https://acme-v02.api.letsencrypt.org/directory\n            email admin@yourdomain.com\n        }\n    }\n\n    reverse_proxy service:8080\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"code-templates/caddyfile-snippets/#detailed-logging","title":"Detailed Logging","text":"<pre><code># Enhanced logging configuration\n(enhanced_logging) {\n    log {\n        output file /var/log/caddy/{host}.log {\n            roll_size 100MB\n            roll_keep 5\n            roll_keep_for 7d\n        }\n        format json\n        level INFO\n        include http.request.headers.User-Agent\n        include http.request.headers.X-Forwarded-For\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code># Health check endpoint\nyourdomain.com {\n    handle /health {\n        respond \"OK\" 200\n    }\n\n    handle {\n        reverse_proxy main-service:8080\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code># Prometheus metrics (if metrics plugin enabled)\n:2019 {\n    metrics /metrics\n\n    # Restrict access to metrics\n    @notlocal {\n        not remote_ip 192.168.50.0/24\n    }\n    respond @notlocal \"Access denied\" 403\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#error-handling","title":"Error Handling","text":""},{"location":"code-templates/caddyfile-snippets/#custom-error-pages","title":"Custom Error Pages","text":"<pre><code># Custom error pages\nservice.yourdomain.com {\n    reverse_proxy service:8080\n\n    # Custom error handling\n    handle_errors {\n        @5xx expression {http.error.status_code} &gt;= 500\n        handle @5xx {\n            rewrite * /50x.html\n            file_server {\n                root /var/www/errors\n            }\n        }\n\n        @4xx expression {http.error.status_code} &gt;= 400\n        handle @4xx {\n            rewrite * /40x.html\n            file_server {\n                root /var/www/errors\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#fallback-configuration","title":"Fallback Configuration","text":"<pre><code># Fallback for undefined services\nyourdomain.com {\n    # Main service\n    handle /api/* {\n        reverse_proxy api-service:8080\n    }\n\n    handle /docs/* {\n        reverse_proxy docs-service:8000\n    }\n\n    # Fallback to default service\n    handle {\n        reverse_proxy default-service:80\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#testing-snippets","title":"Testing Snippets","text":""},{"location":"code-templates/caddyfile-snippets/#testing-configuration","title":"Testing Configuration","text":"<pre><code># Test configuration validation\n# Run: caddy validate --config Caddyfile\ntest.local {\n    respond \"Test configuration\" 200\n\n    header {\n        Content-Type \"text/plain\"\n        X-Test \"true\"\n    }\n}\n</code></pre>"},{"location":"code-templates/caddyfile-snippets/#debug-configuration","title":"Debug Configuration","text":"<pre><code># Debug mode with verbose logging\ndebug.local {\n    log {\n        level DEBUG\n        output stdout\n    }\n\n    reverse_proxy service:8080 {\n        # Log all headers\n        header_up X-Debug \"true\"\n        header_down X-Debug-Response \"true\"\n    }\n}\n</code></pre>"},{"location":"code-templates/docker-compose/","title":"\ud83d\udcdd Docker Compose Template","text":"<p>Overview</p> <p>This template ensures all services follow the same conventions and standards.</p> docker-compose.yml<pre><code>services:\n  [service-name]:\n    image: [service-image]\n    container_name: [service-name]\n    hostname: [service-name]\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: [service-dependent]\n          memory: [service-dependent]\n        reservations:\n          cpus: [service-dependent]\n          memory: [service-dependent]\n    healthcheck:\n      test: ['CMD-SHELL', 'curl -f http://localhost:PORT/']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=[service-name]'\n      - 'com.mistia-nexus.service.type=[service-type]'\n    environment:\n      - TZ=Asia/Singapore\n      - PUID=1000                    \n      - PGID=10                   \n    volumes:\n      - host:container\n    restart: unless-stopped\n    # ports:\n    #   - 'HOST_PORT:CONTAINER_PORT'  # &lt;-- UNCOMMENT if direct access required\n    networks:\n      - mistia-proxy-net\n    #sysctls:\n    #  - net.ipv6.conf.all.disable_ipv6=1  # &lt;-- Uncomment if you want to disable IPv6 for the service\n\n#volumes: # &lt;-- UNCOMMENT if you need to define volumes\n#  [volume-name]:\n#    driver: local\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"code-templates/docker-compose/#security-templates","title":"\ud83d\udd10 Security Templates","text":""},{"location":"code-templates/docker-compose/#high-security-service","title":"High Security Service","text":"<pre><code>services:\n  secure-service:\n    image: secure-app:latest\n    container_name: secure-service\n    hostname: secure-service\n\n    # Enhanced security settings\n    user: \"1000:10\"               # Non-root user\n    read_only: true                 # Read-only filesystem\n\n    # Security capabilities\n    cap_drop:\n      - ALL\n    cap_add:\n      - NET_BIND_SERVICE             # Only if needed for port binding\n\n    # Security options\n    security_opt:\n      - no-new-privileges:true\n\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n\n    healthcheck:\n      test: ['CMD-SHELL', 'curl -f http://localhost:8080/health']\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n\n    labels:\n      - 'com.mistia-nexus.service.name=Secure Service'\n      - 'com.mistia-nexus.service.type=Application'\n      - 'com.mistia-nexus.security.level=high'\n\n    environment:\n      - TZ=Asia/Singapore\n\n    volumes:\n      - ./data:/data\n      - ./config:/config:ro           # Read-only configuration\n      - /tmp:/tmp                     # Writable temp directory\n\n    restart: unless-stopped\n    networks:\n      - mistia-proxy-net\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"code-templates/service-doc/","title":"[Service Name]","text":"<p>Overview</p> <p>A brief, two-sentence description of the service and its purpose within the homelab.</p>"},{"location":"code-templates/service-doc/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> [service-url]</p> <p> [container-name] \u00a0\u00a0\u00a0  [image-name]</p> Container<code>Only for</code><code>multiple services</code> Host Ports Container Ports Network Host Path Container Path <code>Only for multi</code> <code>[host-port]</code> <code>[container-ports]</code> <code>[network]</code> <code>[host volume]</code> <code>[container path]</code>"},{"location":"code-templates/service-doc/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>[Add any prerequisites here.]</p>"},{"location":"code-templates/service-doc/#nvme-storage","title":"\ud83d\uddc2\ufe0f NVMe Storage","text":"<p>SSH into the NAS to create the NVMe volume</p> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <p>Create the required folders</p> <pre><code>sudo mkdir -p /volume1/docker/[service-name]/[folder-name]\n</code></pre>"},{"location":"code-templates/service-doc/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"code-templates/service-doc/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 [service-name]/\n    \u251c\u2500\u2500 .env\n    \u251c\u2500\u2500 docker-compose.yml\n    \u2514\u2500\u2500 [other_files]/\n</code></pre>"},{"location":"code-templates/service-doc/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/path/to/container/data/\n\u251c\u2500\u2500 config/\n\u2514\u2500\u2500 data/\n</code></pre>"},{"location":"code-templates/service-doc/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"<p>Retrieve the PUID and PGID values for the <code>docker-compose.yml</code></p> <pre><code>ssh late4ever@mistia-nexus.local\nid\n</code></pre> docker-compose.yml<pre><code># sample only\nservices:\n  [service-name]:\n    image: [service-image]\n    container_name: [service-name]\n    hostname: [service-name]\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: [service-dependent]\n          memory: [service-dependent]\n        reservations:\n          cpus: [service-dependent]\n          memory: [service-dependent]\n    healthcheck:\n      test: ['CMD-SHELL', 'curl -f http://localhost:PORT/']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=[service-name]'\n      - 'com.mistia-nexus.service.type=[service-type]'\n    environment:\n      - TZ=Asia/Singapore\n      - PUID=1000                    \n      - PGID=10                   \n    volumes:\n      - host:container\n    restart: unless-stopped\n    # ports:\n    #   - 'HOST_PORT:CONTAINER_PORT'  # &lt;-- UNCOMMENT if direct access required\n    networks:\n      - mistia-proxy-net\n    #sysctls:\n    #  - net.ipv6.conf.all.disable_ipv6=1  # &lt;-- Uncomment if you want to disable IPv6 for the service\n\n#volumes: # &lt;-- UNCOMMENT if you need to define volumes\n#  [volume-name]:\n#    driver: local\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"code-templates/service-doc/#dockerfile","title":"\ud83d\udc0b Dockerfile","text":"Dockerfile"},{"location":"code-templates/service-doc/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code># sample only\n@[service-name] host service-name.mistia.xyz\n    handle @service-name {\n        reverse_proxy http://service-name:8200 {\n            import proxy_headers\n        }\n    }\n</code></pre>"},{"location":"code-templates/service-doc/#ansible","title":"Ansible","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre>"},{"location":"code-templates/service-doc/#ansible-vault","title":"Ansible Vault","text":"<pre><code>nexus_vault\n</code></pre> <p>Press I to enter <code>Insert Mode</code></p> secrets.yml<pre><code>the-key-name: \"the-key-value\"\n</code></pre> <p>Press Esc to exit <code>Insert Mode</code></p> <p>Type : W Q and press Enter to save and exit</p>"},{"location":"code-templates/service-doc/#secrets-template","title":"Secrets Template","text":"<pre><code>nano ansible/mistia-nexus/secrets.template.yml\n</code></pre> secrets.template.yml<pre><code>the-key-name: \"\"\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"code-templates/service-doc/#env-template","title":".env Template","text":"<pre><code>touch ansible/mistia-nexus/templates/[service-name].env.j2\nnano ansible/mistia-nexus/template/[service-name].env.j2\n</code></pre> [service-name].env.j2<pre><code>THE_KEY_NAME= {{ the-key-name }}\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"code-templates/service-doc/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code># sample only\nall_services:\n  - name: [service-name]\n          tags: [tags]\n          # whether env file is required\n          has_env: [true|false]\n          # whether bulding of Dockerfile is required\n          has_build: [true|false] \n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"code-templates/service-doc/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code># sample only\nadguard_dns_rewrites:\n  - domain: [service-name].mistia.xyz\n    answer: '192.168.50.4'\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"code-templates/service-doc/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code># sample only\nnexus_deploy --tags proxy-reload,[service_name]\n</code></pre>"},{"location":"code-templates/service-doc/#post-deployment","title":"\u2699\ufe0f Post-Deployment","text":"<p>[Describe any necessary steps to take after the container is running, such as running setup scripts, configuring reverse proxies, etc.]</p>"},{"location":"code-templates/service-doc/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"code-templates/service-doc/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li>[Step-by-step instructions for the initial configuration of the service through its web UI or command line.]</li> <li>[Another step.]</li> <li>[And so on.]</li> </ol>"},{"location":"code-templates/service-doc/#other-setup-requirements","title":"\u2699\ufe0f [Other Setup Requirements]","text":"<ol> <li>[Step-by-step instructions for the requirements]</li> <li>[Another step.]</li> <li>[And so on.]</li> </ol>"},{"location":"initial-setup/mistia-labs/","title":"\ud83d\ude80 Mistia Labs","text":"<p>Overview</p> <p>This guide details how to configure a Windows machine to act as an Ansible \u201ccontrol node\u201d for managing your Mistia-Lab. The standard and most compatible method is to use the Windows Subsystem for Linux (WSL).</p>"},{"location":"initial-setup/mistia-labs/#install-windows-subsystem-for-linux-wsl","title":"\ud83d\udc27 Install Windows Subsystem for Linux (WSL)","text":"<ol> <li> <p>Open PowerShell or Windows Terminal as an Administrator</p> </li> <li> <p>Run the installation command:</p> <pre><code>wsl --install\n</code></pre> </li> <li> <p>Reboot your computer when prompted. After rebooting, an Ubuntu terminal window will open to complete the installation</p> </li> <li> <p>You will be prompted to create a username and password for your new Ubuntu environment</p> </li> </ol>"},{"location":"initial-setup/mistia-labs/#configure-ssh-key-with-wsl","title":"\ud83d\udd11 Configure SSH Key with WSL","text":"<ol> <li> <p>Get Your Private Key:</p> <ul> <li>Open Bitwarden and view your SSH key item (\u201cUGREEN NASync 4800 Plus\u201d)</li> <li>Copy the contents of the private key to your clipboard</li> </ul> </li> <li> <p>Create the SSH Key File in WSL:</p> <ul> <li>In your WSL terminal, run the following command to open a text editor:</li> </ul> <pre><code>mkdir -p ~/.ssh\nnano ~/.ssh/id_ed25519\n</code></pre> <ul> <li>Paste your private key into the editor. The key should start with <code>-----BEGIN OPENSSH PRIVATE KEY-----</code></li> <li>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</li> </ul> </li> <li> <p>Set Correct Permissions:</p> <pre><code>chmod 600 ~/.ssh/id_ed25519\n</code></pre> </li> <li> <p>Verify</p> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> </li> </ol>"},{"location":"initial-setup/mistia-labs/#configure-dns-server","title":"Configure DNS server","text":"<pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>Replace existing <code>nameserver</code> to <code>192.168.50.2</code></p> resolv.conf<pre><code>nameserver 192.168.50.2\n</code></pre> <p>Ctrl+X Y Enter to save and exit</p>"},{"location":"initial-setup/mistia-labs/#configure-docker-with-wsl","title":"Configure Docker with WSL","text":"<ol> <li> <p>Open <code>Docker Desktop</code> \u00bb <code>Settings</code> \u00bb <code>Resources</code> \u00bb <code>WSL integration</code></p> </li> <li> <p>Enable integration with additional distros:</p> <ul> <li>Toggle Ubuntu</li> </ul> </li> <li> <p>Click <code>Apply &amp; restart</code></p> </li> <li> <p>In <code>Ubuntu (WSL) terminal</code></p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> </li> <li> <p>Close all active WSL session for the change to take effect.</p> </li> </ol>"},{"location":"initial-setup/mistia-labs/#install-ansible-inside-wsl","title":"Install Ansible Inside WSL","text":"<p>All subsequent commands should be run inside <code>Ubuntu (WSL) terminal</code></p> <ol> <li> <p>Install Prerequisites</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt install -y python3-pip git python3.12-venv\n</code></pre> </li> <li> <p>Create and Activate a Virtual Environment</p> <pre><code># Create the virtual environment in your home directory\npython3 -m venv ~/ansible-env\n\n# Activate the environment\nsource ~/ansible-env/bin/activate\n</code></pre> <p>Your terminal prompt should now be prefixed with <code>(ansible-env)</code>, indicating the environment is active</p> </li> <li> <p>Install Ansible and Dependencies</p> <pre><code># Install the Ansible package itself\npip install ansible\n# Install uptime kume api\npip install uptime-kuma-api\n\n# Install the Docker collection required for managing containers\nansible-galaxy collection install community.docker\n# Install the uptime kuma collection required for managing monitors\nansible-galaxy collection install lucasheld.uptime_kuma\n</code></pre> </li> </ol> <p>Initial Activation Complete</p> <p>You have activated the environment for the initial setup. For all future work on the project, you will use a more convenient, project-specific script that you will have access to after cloning the repository in the next step.</p>"},{"location":"initial-setup/mistia-labs/#clone-mistia-labs-repository","title":"Clone Mistia-Labs Repository","text":"<pre><code>git clone https://github.com/late4ever/Mistia-Labs.git\ngit config --global user.name \"late4ever\"\ngit config --global user.email \"late4ever@gmail.com\"\n</code></pre>"},{"location":"initial-setup/mistia-labs/#open-in-vs-code","title":"Open in VS Code","text":"<pre><code>cd Mistia-Labs/\ncode .\n</code></pre> <p>This will open the project in a VS Code window, but the files and terminal will be running within the context of WSL.</p>"},{"location":"initial-setup/mistia-labs/#activating-the-project-environment","title":"\ud83d\ude80 Activating the Project Environment","text":"<p>Now that you have the project cloned, you should use the built-in activation script for your daily workflow. This script not only activates the Ansible environment but also sets up helpful aliases and functions.</p> <p>From the project root (<code>~/Mistia-Labs</code>), run:</p> <pre><code>source tools/activate.sh\n</code></pre> <p>What it does</p> <ul> <li>Activates the <code>ansible-env</code> virtual environment.</li> <li>Sets your command prompt to <code>(Mistia-Labs)</code>.</li> <li>Creates a <code>nexus_deploy</code> function to run the main playbook.</li> <li>Creates an <code>ap</code> alias for <code>ansible-playbook</code>.</li> </ul> <p>Remember This Command!</p> <p>From now on, <code>source tools/activate.sh</code> is the only command you need to start working on the project in a new terminal.</p>"},{"location":"initial-setup/mistia-nexus/","title":"\ud83d\ude80 Initial Setup","text":"<p>Overview</p> <p>Complete setup guide to set up a bare UGREEN NASync into a fully functional homelab</p>"},{"location":"initial-setup/mistia-nexus/#prerequisites","title":"\ud83d\udd11 Prerequisites","text":""},{"location":"initial-setup/mistia-nexus/#github","title":"GitHub","text":"<p>Required for Private Repository</p> <p>You need a GitHub Personal Access Token (PAT) to clone the private Mistia-Labs repository.</p> <ol> <li>Visit: GitHub Settings \u00bb Developer settings \u00bb Personal access tokens<ul> <li>From the Generate new token dropdown, select Generate new token (classic)</li> <li>Note: <code>UGREEN NASync 4800 Plus Deploy</code></li> <li>Expiration: No expiration</li> <li>Select scopes: <code>repo</code></li> </ul> </li> <li>Copy the generated token</li> </ol>"},{"location":"initial-setup/mistia-nexus/#cloudflare","title":"Cloudflare","text":"<p>Required for Automatic HTTPS</p> <p>Caddy uses a Cloudflare API Token to perform DNS-01 ACME challenges for automatic HTTPS.</p> <ol> <li>Ensure the <code>mistia.xyz</code> domain is managed by Cloudflare.</li> <li>Visit: Cloudflare Dashboard \u00bb API Tokens<ul> <li>Click Create Token</li> <li>Select the Edit zone DNS template</li> <li>For Zone Resources, select <code>mistia.xyz</code></li> </ul> </li> <li>Copy the generated token</li> <li>Test the token</li> </ol> <pre><code>curl -X GET \"https://api.cloudflare.com/client/v4/user/tokens/verify\" \\\n     -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre>"},{"location":"initial-setup/mistia-nexus/#bitwarden","title":"Bitwarden","text":"<p>Required for SSH Access</p> <p>Use Bitwarden to generate and store your SSH key, and utilize it as an SSH Agent.</p> <ol> <li>Create a new SSH Key<ul> <li>Name: <code>UGREEN NASync 4800 Plus</code></li> <li>Folder: <code>Mistia-Labs</code></li> </ul> </li> <li>Open Windows Terminal and install <code>winssh-pageant</code></li> </ol> <pre><code>winget install winssh-pageant\n</code></pre>"},{"location":"initial-setup/mistia-nexus/#hardware-configuration","title":"\ud83d\udee0\ufe0f Hardware Configuration","text":""},{"location":"initial-setup/mistia-nexus/#ugreen-nasync","title":"UGREEN NASync","text":""},{"location":"initial-setup/mistia-nexus/#device-setup","title":"Device Setup","text":"<ol> <li> <p>Create admin user: <code>late4ever</code></p> </li> <li> <p>Open <code>Control Panel</code> \u00bb <code>Device Connection</code>    In the <code>LAN</code> tab, configure the following:     In the <code>Portal settings</code> tab, configure the following: </p> </li> <li> <p>Open <code>Control Panel</code> \u00bb <code>Terminal</code>    Configure the following:     Open <code>Advance settings</code> and configure the following: </p> </li> <li> <p>Open <code>Control Panel</code> \u00bb <code>Network</code>    In the <code>Network connection</code> tab, create the following <code>Virtual Bridge</code> on <code>LAN2</code>: </p> </li> <li> <p>Copy the <code>Mac Address</code> of the <code>Virtual Bridge</code> and follow DHCP Scope and DHCP Reservation guide</p> </li> <li> <p>Open <code>Control Panel</code> \u00bb <code>Network</code> and make sure that <code>VBR-LAN1</code> is assigned the IP of <code>92.168.50.4</code></p> </li> </ol>"},{"location":"initial-setup/mistia-nexus/#ssh-key","title":"SSH Key","text":"<ol> <li>Open Windows Terminal and SSH into the NAS</li> </ol> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <ol> <li>Download the <code>ssh-permission</code> script and service files    Copy the whole code below and paste into the SSH terminal    Paste in the GitHub PAT when prompted</li> </ol> <pre><code>read -sp 'Paste your GitHub PAT and press Enter: ' GITHUB_TOKEN\nprintf \"\\n\"\nsudo curl -sL -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \\\n\"https://raw.githubusercontent.com/late4ever/Mistia-Labs/main/bootstrap/mistia-nexus-ssh-permission.sh\" \\\n-o /usr/local/bin/mistia-nexus-ssh-permission.sh\n\nsudo curl -sL -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \\\n\"https://raw.githubusercontent.com/late4ever/Mistia-Labs/main/bootstrap/mistia-nexus-ssh-permission.service\" \\\n-o /etc/systemd/system/mistia-nexus-ssh-permission.service\n</code></pre> <ol> <li>Enable the SSH permission service</li> </ol> <pre><code>sudo chmod +x /usr/local/bin/mistia-nexus-ssh-permission.sh\nsudo systemctl daemon-reload\nsudo systemctl enable mistia-nexus-ssh-permission.service\nsudo systemctl start mistia-nexus-ssh-permission.service\n</code></pre> <ol> <li>Check that the service is running</li> </ol> <pre><code>sudo systemctl status mistia-nexus-ssh-permission.service\n</code></pre> <ol> <li>Copy the public key to NAS</li> </ol> <pre><code>echo \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGqAfflniXB7tAWGZ5ttgR+sTj90S4bCJKK4H3O1hPP9\" &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\nexit\n</code></pre> <ol> <li>Now try to SSH into the NAS and Bitwarden should handle the authorisation</li> </ol> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre>"},{"location":"initial-setup/mistia-nexus/#storage-setup","title":"Storage Setup","text":"<ol> <li> <p>Open <code>Storage</code> \u00bb <code>Storage</code>    In the <code>Storage pool &amp; volume</code> tab, create the following: </p> </li> <li> <p>Open <code>Files</code> \u00bb <code>Shared Folder</code>    Create the following <code>Shared Folder</code>: </p> </li> </ol> <p>Folder Access</p> <p>Only allow <code>late4ever</code> access.</p>"},{"location":"initial-setup/mistia-nexus/#application-setup","title":"Application Setup","text":"<ol> <li>Open <code>App Center</code> and install <code>Docker</code></li> </ol>"},{"location":"initial-setup/mistia-nexus/#router","title":"Router","text":""},{"location":"initial-setup/mistia-nexus/#dhcp-scope","title":"DHCP Scope","text":"<ol> <li> <p>Open the Router web interface and go to <code>LAN</code> \u00bb <code>DHCP Server</code></p> </li> <li> <p>Configure the following <code>IP Pool Address</code> range: </p> </li> </ol>"},{"location":"initial-setup/mistia-nexus/#dhcp-reservation","title":"DHCP Reservation","text":"<ol> <li> <p>Open the Router web interface and go to <code>LAN</code> \u00bb <code>DHCP Server</code></p> </li> <li> <p>Create a <code>DHCP Reservation</code> for <code>UGREEN NASync</code> at <code>192.168.50.4</code> </p> </li> </ol>"},{"location":"initial-setup/mistia-nexus/#dns-server","title":"DNS Server","text":"<p>DNS Server Setting</p> <p>Only configure this when the AdGuard Home service is running.</p> <ol> <li> <p>Open the Router web interface and go to <code>LAN</code> \u00bb <code>DHCP Server</code></p> </li> <li> <p>Configure the following DNS Server setting: </p> </li> </ol>"},{"location":"initial-setup/mistia-nexus/#start-up-services","title":"\ud83d\ude80 Start Up Services","text":""},{"location":"initial-setup/mistia-nexus/#deploy-containers","title":"\ud83d\udcbb Deploy Containers","text":"<ol> <li>SSH into the NAS</li> </ol> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <ol> <li>Download the <code>setup.sh</code>    Copy the whole code below and paste into the SSH terminal    Paste in the GitHub PAT when prompted</li> </ol> <pre><code>read -sp 'Paste your GitHub PAT and press Enter: ' GITHUB_TOKEN\nprintf \"\\n\"\ncurl -sL -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \\\n\"https://raw.githubusercontent.com/late4ever/Mistia-Labs/main/bootstrap/mistia-nexus-setup.sh\" \\\n-o setup.sh\nchmod +x setup.sh\n./setup.sh \"${GITHUB_TOKEN}\"\n</code></pre> <ol> <li>Exit the SSH session and log back in</li> </ol> <pre><code>exit\nssh late4ever@mistia-nexus.local\n</code></pre> <ol> <li>Start up the containers</li> </ol> <p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy\n</code></pre> <p>WSL Terminal</p> <p>This is to be done in WSL not in NAS</p>"},{"location":"initial-setup/mistia-nexus/#configure-dns-sinkhole","title":"\ud83d\udd17 Configure DNS Sinkhole","text":"<ol> <li>Download the <code>macvlan-host</code> script and service files    Copy the whole code below and paste into the SSH terminal    Paste in the GitHub PAT when prompted</li> </ol> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <pre><code>read -sp 'Paste your GitHub PAT and press Enter: ' GITHUB_TOKEN\nprintf \"\\n\"\nsudo curl -sL -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \\\n\"https://raw.githubusercontent.com/late4ever/Mistia-Labs/main/bootstrap/mistia-nexus-macvlan-host.sh\" \\\n-o /usr/local/bin/mistia-nexus-macvlan-host.sh\n\nsudo curl -sL -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \\\n\"https://raw.githubusercontent.com/late4ever/Mistia-Labs/main/bootstrap/mistia-nexus-macvlan-host.service\" \\\n-o /etc/systemd/system/mistia-nexus-macvlan-host.service\n</code></pre> <ol> <li>Enable the <code>mistia-nexus-macvlan-host</code> service</li> </ol> <pre><code>sudo chmod +x /usr/local/bin/mistia-nexus-macvlan-host.sh\nsudo systemctl daemon-reload\nsudo systemctl enable mistia-nexus-macvlan-host.service\nsudo systemctl start mistia-nexus-macvlan-host.service\n</code></pre> <ol> <li>Check that the service is running</li> </ol> <pre><code>sudo systemctl status mistia-nexus-macvlan-host.service\n</code></pre> <ol> <li>Follow this guide to set up network-wide DNS filtering</li> </ol>"},{"location":"initial-setup/mistia-nexus/#deployment-complete","title":"\ud83c\udf89 Deployment Complete","text":"<ul> <li>\ud83d\udd12 Secure HTTPS access to all services via Caddy reverse proxy</li> <li>\ud83d\udee1\ufe0f Network-wide DNS filtering via AdGuard Home</li> <li>\ud83d\udcbe Automated encrypted backups via Duplicati</li> <li>\ud83d\udc33 Docker management interface via Portainer</li> <li>\ud83d\udcda Complete documentation via MkDocs</li> </ul>"},{"location":"initial-setup/mistia-nexus/#next-steps","title":"\ud83d\udd04 Next Steps","text":"<p>Follow the individual services guide on <code>Post Deployment</code> &amp; <code>Initial Setup</code></p>"},{"location":"overview/service-directory/","title":"\ud83d\udccb Service Directory","text":"<p>Overview</p> <p>A quick reference for all service URLs, IP addresses, ports, and access information.</p>"},{"location":"overview/service-directory/#service-urls","title":"\ud83d\udd17 Service URLs","text":""},{"location":"overview/service-directory/#hardware-interface","title":"\ud83d\udd79\ufe0f Hardware Interface","text":"Service URL  RouterASUS ZenWiFi Pro ET12 https://asus-et12.mistia.xyzhttps://192.168.50.1:8443  Mistia NexusUGREEN NASync DXP4800 Plus https://nexus.mistia.xyzhttps://mistia-nexus.local:9443"},{"location":"overview/service-directory/#core-services","title":"\ud83d\udee0\ufe0f Core Services","text":"Service URL Purpose Documentation  AdGuard Home https://adguard.mistia.xyzhttps://192.168.50.2 Network-wide DNS filtering View Here  Caddy Admin API Infrastructurehttps://caddy.mistia.xyz Reverse proxy with auto-HTTPSConfiguration management View Here  Tailscale Tailscale Admin Console Secure remote access VPN View Here  Portainer https://portainer.mistia.xyzhttps://mistia-nexus.local:10001 Docker management View Here  Dockge https://dockge.mistia.xyzhttp://mistia-nexus.local:10002 Docker compose manager View Here \ud83d\udc1d Dozzle https://dozzle.mistia.xyzhttp://mistia-nexus.local:10003 Real-time log viewer View Here \ud83d\udc3b Uptime Kuma https://kuma.mistia.xyzhttp://mistia-nexus.local:10004 Service uptime monitoring View Here  Duplicati https://duplicati.mistia.xyzhttps://mistia-nexus.local:10101 Encrypted backups View Here"},{"location":"overview/service-directory/#cloud-services","title":"\u2601\ufe0f Cloud Services","text":"Service URL Purpose Documentation  Nextcloud https://nextcloud.mistia.xyzhttps://mistia-nexus.local:10201 Self-hosted file sync and collaboration View Here"},{"location":"overview/service-directory/#network-configuration","title":"\ud83c\udf10 Network Configuration","text":""},{"location":"overview/service-directory/#ip-address-allocation","title":"IP Address Allocation","text":"Network Node IP Address Description \ud83c\udf10 Default Gateway <code>192.168.50.1</code> Main router providing internet access and local routing  AdGuard Home <code>192.168.50.2</code> Primary DNS sinkhole service for network-wide ad blocking  Macvlan-Host <code>192.168.50.3</code> Dedicated interface for Host to reach Adguard Home  UGREEN NASync Host <code>192.168.50.4</code> UGREEN NASyc host system  Caddy Reverse Proxy <code>192.168.50.4:443</code> Manages external access to services with SSL"},{"location":"overview/service-directory/#exposed-host-ports","title":"Exposed Host Ports","text":"<p>This table lists the ports exposed on the NAS host (<code>192.168.50.4</code>).</p> Service Host Port Description Caddy <code>80</code>, <code>443</code><code>853</code><code>2019</code> Standard HTTP/S ports for the reverse proxyDNS over TLS (DoT) portAdmin API Portainer <code>10001</code> Local access to the Portainer web UI Dockge <code>10002</code> Local access to the Dockge web UI Dozzle <code>10003</code> Local access to the Dozzle web UI Uptime Kuma <code>10004</code> Local access to the Uptime Kuma web UI Duplicati <code>10101</code> Local access to the Duplicati web UI Nextcloud <code>10201</code> Local access to the Nextcloud web UI"},{"location":"procedures/ansible-setup-guide/","title":"Ansible Setup Guide","text":"<p>Overview</p> <p>This guide outlines the process of setting up Ansible. This provides a more robust, declarative, and idempotent way to manage your services. You will create the Ansible project structure inside your existing <code>Mistia-Labs</code> repository.</p> <p>Working Directory</p> <p>All commands should be run from your WSL terminal, inside your activated <code>(ansible-env)</code> virtual environment, from the <code>Mistia-Labs</code> directory.</p>"},{"location":"procedures/ansible-setup-guide/#create-the-ansible-project-structure","title":"\ud83d\udcc2 Create the Ansible Project Structure","text":"<p>First, we will create a dedicated <code>ansible</code> directory inside your <code>Mistia-Labs</code> repository to hold all configuration files</p> <ol> <li> <p>Navigate into your repository in the WSL terminal:</p> <p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> </li> <li> <p>Create the necessary directory and files:</p> <pre><code>mkdir -p ansible/templates\ntouch ansible/ansible.cfg ansible/inventory.ini ansible/deploy_services.yml\n</code></pre> </li> </ol> <p>Your project structure should now look like this:</p> <pre><code>Mistia-Labs/\n\u2514\u2500\u2500 ansible/\n    \u251c\u2500\u2500 ansible.cfg                   # &lt;-- Global Ansible settings\n    \u251c\u2500\u2500 inventory.ini                 # &lt;-- Your master inventory\n    \u2514\u2500\u2500 mistia-nexus/                 # &lt;-- Directory for this specific environment\n        \u251c\u2500\u2500 ansible.cfg               # &lt;-- Ansible settings\n        \u251c\u2500\u2500 inventory.ini             # &lt;-- Inventory\n        \u251c\u2500\u2500 deploy_services.yml       # &lt;-- The main playbook for the nexus\n        \u251c\u2500\u2500 _deploy_service_loop.yml  # &lt;-- The loop file\n        \u251c\u2500\u2500 secrets.yml               # &lt;-- Encrypted secrets for the nexus\n        \u251c\u2500\u2500 .vault_pass               # &lt;-- Vault password file (git-ignored)\n        \u2514\u2500\u2500 templates/                # &lt;-- Templates for nexus services\n            \u251c\u2500\u2500 caddy.env.j2\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"procedures/ansible-setup-guide/#configure-wsl-for-ssh-key-authentication","title":"\ud83d\udd11 Configure WSL for SSH Key Authentication","text":"<ol> <li> <p>Get Your Private Key:</p> <ul> <li>Open Bitwarden and view your SSH key item (\u201cUGREEN NASync 4800 Plus\u201d)</li> <li>Copy the contents of the private key to your clipboard</li> </ul> </li> <li> <p>Create the SSH Key File in WSL:</p> <ul> <li>In your WSL terminal, run the following command to open a text editor:</li> </ul> <pre><code>mkdir -p ~/.ssh\nnano ~/.ssh/id_ed25519\n</code></pre> <ul> <li>Paste your private key into the editor. The key should start with <code>-----BEGIN OPENSSH PRIVATE KEY-----</code></li> <li>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</li> </ul> </li> <li> <p>Set Correct Permissions:</p> <pre><code>chmod 600 ~/.ssh/id_ed25519\n</code></pre> </li> <li> <p>Verify</p> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> </li> </ol>"},{"location":"procedures/ansible-setup-guide/#configure-ansible","title":"\u2699\ufe0f Configure Ansible","text":"<p>Next, configure Ansible to work seamlessly within your project.</p> <ol> <li> <p>Edit <code>ansible/ansible.cfg</code>:     This file tells Ansible where to find its inventory.</p> <pre><code>[defaults]\ninventory = ./inventory.ini\nhost_key_checking = False\n</code></pre> </li> <li> <p>Edit <code>ansible/inventory.ini</code>:     This file lists the servers you want to manage.</p> <pre><code>[nexus]\nmistia-nexus.local ansible_user=late4ever\n</code></pre> </li> <li> <p>Test the Connection:     Run a ping from the <code>ansible</code> directory to confirm everything is working.</p> <pre><code>cd ansible\nansible nexus -m ping\n</code></pre> <p>You should see a green <code>SUCCESS</code> response.</p> </li> </ol>"},{"location":"procedures/ansible-setup-guide/#secure-secrets-with-ansible-vault","title":"\ud83d\udd10 Secure Secrets with Ansible Vault","text":"<p>We will use Ansible Vault to securely manage your secrets, replacing the manual creation of <code>.env</code> files.</p> <ol> <li> <p>Important: Update <code>.gitignore</code>     Add the following line to the main <code>.gitignore</code> file at the root of <code>Mistia-Labs</code> to prevent your secrets file from ever being committed to the repository.</p> <pre><code># Ignore Ansible secrets\nansible/secrets.yml\n</code></pre> </li> <li> <p>Create the Vault     From the <code>ansible</code> directory, run the following command. You will be prompted to create a password for the vault. Store this password in Bitwarden.</p> <pre><code>ansible-vault create secrets.yml\n</code></pre> </li> <li> <p>Add Your Secrets     The command will open a text editor. Add all your secrets in YAML format.</p> Using Vim <p>Press I to enter <code>Insert mode</code> Paste your secrets Press Esc to exit <code>Insert mode</code> Type : W Q and press Enter to write (save) and quit.</p> <pre><code># Replace with acutal secrets\ncloudflare_api_token: ''\ncaddy_email: ''\nduplicati_settings_key: ''\nduplicati_ui_password: ''\nts_authkey: ''\nnextcloud_db_password: ''\nnextcloud_db_root_password: ''\nnextcloud_admin_user: ''\nnextcloud_admin_password: ''\nansible_become_pass: ''\nadguard_user: ''\nadguard_password: ''\nkuma_user: ''\nkuma_password: ''\n</code></pre> <p>Save and close the editor. The file is now encrypted.</p> </li> </ol>"},{"location":"procedures/ansible-setup-guide/#create-env-templates","title":"\ud83d\udcc3 Create <code>.env</code> Templates","text":"<p>For each service requiring secrets, create a template file in <code>ansible/templates/</code>. These templates will be populated with the secrets from your vault.</p> <p>Example: <code>ansible/templates/caddy.env.j2</code></p> <pre><code>CLOUDFLARE_API_TOKEN={{ cloudflare_api_token }}\nCADDY_EMAIL={{ caddy_email }}\n</code></pre> <p>Example: <code>ansible/templates/nextcloud.env.j2</code></p> <pre><code>DB_PASSWORD={{ db_password }}\nDB_ROOT_PASSWORD={{ db_root_password }}\nADMIN_USER={{ admin_user }}\nADMIN_PASSWORD={{ admin_password }}\n</code></pre> <p>Create similar <code>.env.j2</code> files for <code>duplicati</code> and <code>tailscale</code>.</p>"},{"location":"procedures/ansible-setup-guide/#5-create-the-deployment-playbook","title":"5. Create the Deployment Playbook","text":"<p>Finally, create the main playbook that will replace your scripts. This playbook will deploy all your Docker services.</p> <p>Edit <code>ansible/deploy_services.yml</code>:</p> <pre><code>---\n- name: Deploy Mistia-Nexus Services\n  hosts: nas\n  become: yes\n  vars_files:\n    - secrets.yml\n  vars:\n    deploy_path: \"{{ playbook_dir }}/../mistia-nexus\"\n    services:\n      - name: caddy\n      - name: portainer\n      - name: duplicati\n      - name: tailscale\n      - name: nextcloud\n\n  tasks:\n    - name: Ensure proxy network exists\n      community.docker.docker_network:\n        name: mistia-proxy-net\n        state: present\n\n    - name: Create .env files from templates\n      ansible.builtin.template:\n        src: \"templates/{{ item.name }}.env.j2\"\n        dest: \"{{ deploy_path }}/{{ item.name }}/.env\"\n        mode: '0600'\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n      loop: \"{{ services }}\"\n      when: item.name != 'portainer' # Portainer has no .env file\n      become: no # Run this task as the ansible_user\n\n    - name: Deploy all services\n      community.docker.docker_compose_v2:\n        project_src: \"{{ deploy_path }}/{{ item.name }}\"\n        state: present\n        pulled: yes # Pulls latest images\n      loop: \"{{ services }}\"\n      tags:\n        - \"{{ item.name }}\"\n</code></pre>"},{"location":"procedures/ansible-setup-guide/#6-run-your-first-deployment","title":"6. Run Your First Deployment","text":"<p>From the <code>ansible</code> directory, you can now deploy everything with a single command. You will be prompted for your vault password.</p> <pre><code># To deploy or update ALL services\nansible-playbook deploy_services.yml --ask-vault-pass\n\n# To deploy or update ONLY Caddy\nansible-playbook deploy_services.yml --tags caddy --ask-vault-pass\n</code></pre>"},{"location":"procedures/automate-vault-password/","title":"\ud83d\udd11 Automating the Vault Password","text":"<p>Overview</p> <p>This guide explains how to automate providing the Ansible Vault password by using a vault password file. This allows you to run playbooks without being interactively prompted for a password, which is essential for scripting and automation.</p> <p>Security Consideration</p> <p>This method involves storing your vault password in a plaintext file on your control node\u2019s filesystem. It is critical that you set the correct file permissions (<code>600</code>) to ensure only your user account can read it.</p>"},{"location":"procedures/automate-vault-password/#step-1-create-the-vault-password-file","title":"Step 1: Create the Vault Password File","text":"<ol> <li> <p>From your WSL terminal, navigate into your Ansible project directory:</p> <pre><code>cd ~/Mistia-Labs/ansible\n</code></pre> </li> <li> <p>Create a new file to store the password. It\u2019s conventional to name it <code>.vault_pass</code>.</p> <pre><code># Create the file and paste your vault password into it.\n# Make sure there are no extra spaces or newlines.\necho \"YourVaultPassword\" &gt; .vault_pass\n</code></pre> </li> <li> <p>Set Strict Permissions. This is the most important step. This command ensures that only your user can read the file.</p> <pre><code>chmod 600 .vault_pass\n</code></pre> </li> </ol>"},{"location":"procedures/automate-vault-password/#step-2-update-gitignore","title":"Step 2: Update <code>.gitignore</code>","text":"<p>To ensure you never accidentally commit your password file to the Git repository, add it to your main <code>.gitignore</code> file.</p> <ol> <li>Open the <code>.gitignore</code> file at the root of your <code>Mistia-Labs</code> repository.</li> <li> <p>Add the following line:</p> <pre><code># Ignore Ansible vault password file\nansible/.vault_pass\n</code></pre> </li> </ol>"},{"location":"procedures/automate-vault-password/#step-3-configure-ansible-to-use-the-file","title":"Step 3: Configure Ansible to Use the File","text":"<p>Now, we need to tell Ansible where to find this password file by updating the <code>ansible.cfg</code> file.</p> <ol> <li>Open <code>ansible/ansible.cfg</code> in your editor.</li> <li> <p>Add the <code>vault_password_file</code> line to the <code>[defaults]</code> section.</p> <pre><code>[defaults]\ninventory = ./inventory.ini\nhost_key_checking = False\nvault_password_file = ./.vault_pass\n</code></pre> </li> </ol>"},{"location":"procedures/automate-vault-password/#step-4-run-your-playbook","title":"Step 4: Run Your Playbook","text":"<p>You can now run your playbooks without the <code>--ask-vault-pass</code> flag. Ansible will automatically and securely read the password from the file you created.</p> <p>```bash</p>"},{"location":"procedures/automate-vault-password/#navigate-to-your-ansible-directory","title":"Navigate to your ansible directory","text":"<p>cd ~/Mistia-Labs/ansible</p>"},{"location":"procedures/automate-vault-password/#run-the-playbook-no-password-prompt","title":"Run the playbook - no password prompt!","text":"<p>ansible-playbook deploy_services.yml</p>"},{"location":"procedures/backup-restore/","title":"Backup &amp; Restore","text":"<p>Overview</p> <p>This document provides comprehensive procedures for backing up and restoring the Mistia-Nexus homelab infrastructure, including configuration files, application data, and complete system recovery.</p>"},{"location":"procedures/backup-restore/#backup-strategy","title":"\ud83d\udcbe Backup Strategy","text":""},{"location":"procedures/backup-restore/#mistia-nexus-app-backup","title":"\ud83d\udee0\ufe0f Mistia Nexus App Backup","text":"<p>Create a daily, encrypted backup of the entire 2TB NVMe SSD (<code>volume1</code>) onto the 8TB HDD RAID 1 array (<code>volume2</code>). This protects against a failure of the high-performance NVMe drive.</p> <p>These are the settings configured within the Duplicati web interface for this specific job.</p> Setting Configuration Source Data <code>/nasroot/volume1/</code> (The entire NVMe drive) Destination <code>/nasroot/volume2/Backups/NAS-Apps/</code> Schedule Daily at 03:00 AM Encryption AES-256, built-in. A passphrase is required for restore. Backup Retention Keep the last 30 backups Exclusions The following protected system folders are excluded to prevent backing up of unnecessary runtime files:<ul><li><code>/nasroot/volume1/@docker/</code></li><li><code>/nasroot/volume1/#recycle/</code></li><li><code>/nasroot/volume1/lost+found/</code></li><li><code>/nasroot/volume1/@tmp/</code></li><li><code>/nasroot/volume1/@appstore/</code></li></ul> Mistia-Nexus-App-Backup-duplicati-config.json <pre><code>{\n  \"CreatedByVersion\": \"2.1.0.5\",\n  \"Schedule\": {\n    \"ID\": 1,\n    \"Tags\": [\n      \"ID=2\"\n    ],\n    \"Time\": \"2025-06-20T19:00:00Z\",\n    \"Repeat\": \"1D\",\n    \"LastRun\": \"2025-06-19T19:37:01Z\",\n    \"Rule\": \"AllowedWeekDays=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\",\n    \"AllowedDays\": [\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n      \"Sunday\"\n    ]\n  },\n  \"Backup\": {\n    \"ID\": \"2\",\n    \"Name\": \"Mistia Nexus App Backup\",\n    \"Description\": \"NAS NVMe Volume Backup to NAS HDD\",\n    \"Tags\": [],\n    \"TargetURL\": \"file:///nasroot/volume2/Backups/NAS-Apps/\",\n    \"DBPath\": \"/config/QIHTZSKEJZ.sqlite\",\n    \"Sources\": [\n      \"/nasroot/volume1/\"\n    ],\n    \"Settings\": [\n      {\n        \"Filter\": \"\",\n        \"Name\": \"encryption-module\",\n        \"Value\": \"aes\",\n        \"Argument\": null\n      },\n      {\n        \"Filter\": \"\",\n        \"Name\": \"compression-module\",\n        \"Value\": \"zip\",\n        \"Argument\": null\n      },\n      {\n        \"Filter\": \"\",\n        \"Name\": \"dblock-size\",\n        \"Value\": \"100MB\",\n        \"Argument\": null\n      },\n      {\n        \"Filter\": \"\",\n        \"Name\": \"keep-versions\",\n        \"Value\": \"30\",\n        \"Argument\": null\n      }\n    ],\n    \"Filters\": [\n      {\n        \"Order\": 0,\n        \"Include\": false,\n        \"Expression\": \"/nasroot/volume1/@docker/\"\n      },\n      {\n        \"Order\": 1,\n        \"Include\": false,\n        \"Expression\": \"/nasroot/volume1/#recycle/\"\n      },\n      {\n        \"Order\": 2,\n        \"Include\": false,\n        \"Expression\": \"/nasroot/volume1/lost\\u002Bfound/\"\n      },\n      {\n        \"Order\": 3,\n        \"Include\": false,\n        \"Expression\": \"/nasroot/volume1/@tmp/\"\n      },\n      {\n        \"Order\": 4,\n        \"Include\": false,\n        \"Expression\": \"/nasroot/volume1/@appstore/\"\n      }\n    ],\n    \"Metadata\": {\n      \"LastBackupDate\": \"20250619T193709Z\",\n      \"BackupListCount\": \"1\",\n      \"TotalQuotaSpace\": \"7985040457728\",\n      \"FreeQuotaSpace\": \"7420943233024\",\n      \"AssignedQuotaSpace\": \"-1\",\n      \"TargetFilesSize\": \"3399\",\n      \"TargetFilesCount\": \"3\",\n      \"TargetSizeString\": \"3.319 KB\",\n      \"SourceFilesSize\": \"0\",\n      \"SourceFilesCount\": \"0\",\n      \"SourceSizeString\": \"0 bytes\",\n      \"LastBackupStarted\": \"20250619T194954Z\",\n      \"LastBackupFinished\": \"20250619T194958Z\",\n      \"LastBackupDuration\": \"00:00:03.9138162\",\n      \"LastCompactDuration\": \"00:00:00.4787699\",\n      \"LastCompactStarted\": \"20250619T194955Z\",\n      \"LastCompactFinished\": \"20250619T194956Z\",\n      \"LastErrorDate\": \"20250619T194902Z\",\n      \"LastErrorMessage\": \"Found 3 remote files that are not recorded in local storage, please run repair\"\n    },\n    \"IsTemporary\": false\n  },\n  \"DisplayNames\": {\n    \"/nasroot/volume1/\": \"volume1\"\n  }\n}\n</code></pre>"},{"location":"procedures/backup-restore/#data-restoration","title":"\u21a9\ufe0f Data Restoration","text":""},{"location":"procedures/backup-restore/#restore-files-or-folders","title":"\ud83d\udcc2 Restore File(s) or Folder(s)","text":"<ol> <li> <p>Access Duplicati: Log into the Duplicati web UI at <code>https://duplicati.mistia.xyz</code></p> </li> <li> <p>Start Restore: Click <code>Restore</code> \u00bb <code>Direct restore from backup files</code></p> </li> <li> <p>Connect to Backup:</p> <ul> <li>Storage Type: <code>Local folder or drive</code></li> <li>Type Path: <code>Click on Manually Type Path</code></li> <li> <p>For Mistia Nexus App: Copy and paste this</p> <pre><code>/nasroot/volume2/Backups/NAS-Apps/\n</code></pre> </li> <li> <p>Click \u201cTest connection\u201d.</p> </li> </ul> </li> <li> <p>Encryption: Enter the backup job\u2019s specific encryption passphrase</p> </li> <li> <p>Select Files: Browse the file tree and place a checkmark next to the specific file(s) or folder(s) you wish to restore</p> </li> <li> <p>Set Restore Options:</p> <ul> <li>Restore to: Select \u201cRestore to a different location\u201d</li> <li>Path: Enter a temporary, writable path, such as <code>/config/temp_restore/</code></li> </ul> </li> <li> <p>Click \u201cRestore\u201d.</p> </li> <li> <p>Verify: Go to the restored location and check for the restored files</p> </li> </ol>"},{"location":"procedures/backup-restore/#full-disaster-recovery-volume1-failure","title":"\ud83d\udea8 Full Disaster Recovery (Volume1 Failure)","text":"<p>This procedure covers a catastrophic failure of the primary NVMe SSD (<code>volume1</code>). It assumes you have physically replaced the drive and that your core services (AdGuard, Caddy, Duplicati) have their configuration data on <code>volume2</code>, making them recoverable before restoring <code>volume1</code>.</p> <p>Precautionary Step: DNS</p> <p>The following steps may require the NAS to download Docker images from the internet. To prevent a DNS dependency loop (where the NAS can\u2019t resolve addresses because AdGuard isn\u2019t running yet), it is safest to perform this initial step.</p> <p>Recovery Sequence:</p> <ol> <li> <p>Temporarily Reconfigure Router DNS:</p> <ul> <li>Log into your network router\u2019s administration page.</li> <li>Change the primary DNS server from the AdGuard Home IP (<code>192.168.50.2</code>) to a public DNS provider (e.g., <code>1.1.1.1</code> or your ISP\u2019s default).</li> <li>This ensures the NAS has reliable internet access for the next steps.</li> </ul> </li> <li> <p>Start Core DNS Service (AdGuard Home):</p> <ul> <li>Your <code>start-all.sh</code> script is designed to ignore AdGuard Home to prevent accidental downtime. Therefore, it must be started independently.</li> <li>Connect to your NAS via SSH.</li> <li> <p>Navigate to the scripts directory and use the <code>update.sh</code> script to cleanly start AdGuard:</p> <pre><code>cd /volume2/docker/mistia-nexus/scripts\nupdate.sh adguard-home\n</code></pre> </li> </ul> </li> <li> <p>Start Remaining Core Services:</p> <ul> <li>With DNS running, start all other core infrastructure services (Caddy, Duplicati, etc.).</li> <li> <p>From the same <code>scripts</code> directory, run the <code>start-all.sh</code> script. It will safely ignore the already-running AdGuard container.</p> <pre><code>start-all.sh\n</code></pre> </li> <li> <p>You can now access the Duplicati web UI via its standard address (<code>https://duplicati.mistia.xyz</code>).</p> </li> </ul> </li> <li> <p>Restore Normal DNS Operation:</p> <ul> <li>At this point, all core services are running, including AdGuard. You can now safely revert your router\u2019s DNS settings.</li> <li>Log back into your router and change the primary DNS server back to your AdGuard Home IP (<code>192.168.50.2</code>).</li> <li>Your network is now operating normally while the data restore proceeds.</li> </ul> </li> <li> <p>Restore <code>volume1</code> from Backup:</p> <ul> <li>Access the Duplicati web UI.</li> <li>Your <code>Mistia-Nexus-App-Backup</code> job will be present. Click the \u201cRestore\u201d button for that job.</li> <li>Select the latest backup version.</li> <li>For restore options, choose \u201cOriginal location\u201d and \u201cOverwrite\u201d to ensure a clean restore onto the new empty volume.</li> <li>Click \u201cRestore\u201d and wait for the process to complete.</li> </ul> </li> <li> <p>Start Data-Dependent Applications:</p> <ul> <li>Once the restore is complete, you can start any applications that rely on the restored <code>volume1</code> data.</li> </ul> </li> </ol>"},{"location":"procedures/backup-restore/#disaster-recovery-total-nas-failure","title":"\ud83d\udca5 Disaster Recovery (Total NAS Failure)","text":"<p>This is the most severe scenario, assuming the entire NAS hardware has failed and been replaced. You are starting with a new NAS and your external HDD backup of <code>volume2</code>.</p> <p>This is a two-phase recovery. You must first restore the foundational <code>volume2</code> using a temporary tool, then use the tools on that restored foundation to recover <code>volume1</code>.</p>"},{"location":"procedures/backup-restore/#phase-1-restore-volume2-from-external-hdd","title":"Phase 1: Restore <code>volume2</code> from External HDD","text":"<p>Goal: To decrypt and restore the contents of your external HDD backup onto the new, blank <code>volume2</code>.</p> <ol> <li> <p>Prepare New NAS:</p> <ul> <li>Install the UGREEN OS on the new hardware.</li> <li>Create Storage Pool 1 (<code>volume1</code>) on the NVMe drive.</li> <li>Create Storage Pool 2 (<code>volume2</code>) on the HDD RAID array.</li> <li>Install the Docker application from the App Center. This creates the necessary (but empty) <code>@docker</code> and <code>docker</code> folders on <code>volume1</code>.</li> </ul> </li> <li> <p>Connect External HDD:</p> <ul> <li>Plug your external HDD backup directly into a USB port on the new NAS. The NAS will mount it automatically (e.g., at a path like <code>/run/media/usb-drive</code>).</li> </ul> </li> <li> <p>Launch Temporary Duplicati Container:</p> <ul> <li>Connect to your new NAS via SSH.</li> <li> <p>Execute the following <code>docker run</code> command to start a temporary Duplicati instance. This instance is clean and does not use any of your existing project configurations.</p> <pre><code>docker run --rm -it \\\n  -p 8200:8200 \\\n  -v /path/to/external-hdd:/source_backup \\\n  -v /volume2:/restore_destination \\\n  duplicati/duplicati:latest\n</code></pre> </li> <li> <p>Note: Replace <code>/path/to/external-hdd</code> with the actual mount point of your USB drive.</p> </li> </ul> </li> <li> <p>Perform <code>volume2</code> Restore:</p> <ul> <li>On your desktop computer, open a web browser to <code>http://&lt;new-nas-ip&gt;:8200</code>.</li> <li>Click <code>Restore</code> \u00bb <code>Direct restore from backup files</code>.</li> <li>Backend (Storage Type): <code>Local folder or drive</code></li> <li>Path: <code>/source_backup</code> (This is the path inside the temporary container).</li> <li>Encryption: Enter the encryption passphrase for your external HDD backup.</li> <li>Restore to: Select \u201cRestore to a different location\u201d and enter the path <code>/restore_destination</code>.</li> <li>Click \u201cRestore\u201d. Duplicati will decrypt the backup and write the original files (your <code>mistia-nexus</code> project, scripts, and the <code>volume1</code> backup data) to <code>volume2</code>.</li> </ul> </li> <li> <p>Clean Up:</p> <ul> <li>Once the restore is complete, go back to your SSH terminal and press <code>Ctrl+C</code> to stop and automatically remove the temporary Duplicati container.</li> </ul> </li> </ol>"},{"location":"procedures/backup-restore/#phase-2-restore-volume1","title":"Phase 2: Restore <code>volume1</code>","text":"<p>At the end of Phase 1, your new NAS is in the exact same state as a NAS that has only suffered a <code>volume1</code> failure.</p> <p>Proceed with the Full Disaster Recovery (Volume1 Failure) plan outlined above.</p>"},{"location":"procedures/dns-troubleshooting/","title":"DNS Troubleshooting","text":"<p>Overview</p> <p>This guide outlines the procedure for investigating and unblocking a website that you suspect is being blocked by AdGuard Home.</p>"},{"location":"procedures/dns-troubleshooting/#a-website-is-blocked","title":"\ud83e\udd14 A Website is Blocked","text":"<p>You attempt to navigate to a website (e.g., <code>example.com</code>), but the page fails to load, and you suspect AdGuard\u2019s filtering is the cause. The goal is to check the logs, confirm the block, and unblock the domain if it is safe.</p>"},{"location":"procedures/dns-troubleshooting/#investigate-and-unblock","title":"\u25b6\ufe0f Investigate and Unblock","text":""},{"location":"procedures/dns-troubleshooting/#1-access-the-query-log","title":"1. Access the Query Log","text":"<p>First, you need to log into the AdGuard Home web interface.</p> <ul> <li>URL: https://adguard.mistia.xyz</li> <li>Navigate to the Query Log section from the main menu.</li> </ul> <p></p>"},{"location":"procedures/dns-troubleshooting/#2-filter-the-logs","title":"2. Filter the Logs","text":"<p>The Query Log shows every DNS request made by your clients. You can filter this list to quickly find the request you\u2019re interested in.</p>"},{"location":"procedures/dns-troubleshooting/#option-a-filter-by-client","title":"Option A: Filter by Client","text":"<p>This is the most effective method if you know the IP address of the device you were using when the site was blocked.</p> <ol> <li>In the Clients filter dropdown at the top of the page, select the IP address or name of your device (e.g., <code>192.168.1.100</code>).</li> <li>Look through the recent requests from this client. Blocked requests are typically highlighted in red or orange.</li> </ol>"},{"location":"procedures/dns-troubleshooting/#option-b-filter-by-domain","title":"Option B: Filter by Domain","text":"<p>If you know the exact domain that was blocked, you can search for it directly.</p> <ol> <li>In the Search bar at the top of the page, type the domain name (e.g., <code>example.com</code>).</li> <li>The log will update to show only requests matching that domain.</li> </ol>"},{"location":"procedures/dns-troubleshooting/#3-identify-and-unblock","title":"3. Identify and Unblock","text":"<p>Once you\u2019ve located the blocked request in the log:</p> <ol> <li>Confirm the Block: The entry will be clearly marked as \u201cBlocked\u201d and will often show which filter list caused the block (e.g., \u201cBlocked by AdGuard DNS filter\u201d).</li> <li>Verify Safety: Before proceeding, take a moment to consider if the domain is legitimate. If it looks suspicious or is from an unknown source, it may have been blocked for a good reason (e.g., malware, tracking).</li> <li>Unblock the Domain: If you are confident the domain is safe, click the Unblock button next to the log entry.</li> </ol> <p> </p> <p>This action adds the domain to your personal \u201cAllow List\u201d and will prevent AdGuard from blocking it in the future.</p>"},{"location":"procedures/dns-troubleshooting/#4-test-your-access","title":"4. Test Your Access","text":"<ul> <li>Clear your device\u2019s browser cache or DNS cache.</li> <li>Try to access the website again. It should now load correctly.</li> </ul>"},{"location":"procedures/dns-troubleshooting/#re-blocking-a-domain","title":"\u21a9\ufe0f Re-blocking a Domain","text":"<p>If you unblock a domain and later decide it was a mistake, you can easily remove it from your custom rules to re-enable blocking for it.</p> <ol> <li>Navigate to Custom Rules: In the AdGuard Home UI, go to <code>Filters</code> \u00bb <code>Custom filtering rules</code>.</li> <li>Find the Rule: Look for the entry corresponding to the domain you unblocked. It will look like <code>@@||example.com^</code>. The <code>@@</code> prefix indicates it\u2019s an exception (allow) rule.</li> <li>Delete the Rule: Click the trash can icon next to the rule to delete it.</li> <li>Apply Changes: Click the \u201cApply\u201d button to save your changes.</li> </ol> <p></p> <p>AdGuard will now resume blocking this domain based on your configured filter lists.</p>"},{"location":"procedures/internet-troubleshooting/","title":"\ud83c\udf10 Internet Troubleshooting","text":"<p>Overview</p> <p>This guide outlines the procedure for investigating why the Internet is down.</p>"},{"location":"procedures/internet-troubleshooting/#remove-adguard-home-dns","title":"Remove AdGuard Home DNS","text":"<ol> <li> <p>Go to https://192.168.50.1:8443 on a device that is connected to our LAN or Wifi</p> <p></p> </li> <li> <p>Login using <code>Bitwarden</code> search for <code>Asus ET12</code> and use this credential to login</p> </li> <li> <p>On the left-hand menu, select <code>LAN</code></p> <p></p> </li> <li> <p>Select the <code>DHCP Server</code> tab</p> <p></p> </li> <li> <p>Scroll down to the <code>DNS and WINS Server Setting</code></p> <p></p> </li> <li> <p>Update the values:</p> <ul> <li>DNS Server 1: Clear any values</li> <li>DNS Server 2: Clear any values</li> <li>Advertise router\u2019s IP in addition to user-specified DNS: <code>Yes</code></li> <li>WINS Server: Clear any values</li> </ul> <p></p> </li> <li> <p>Click <code>Apply</code> at the bottom</p> </li> <li> <p>If the internet is not resumed, call <code>My Republic</code> at <code>+65 6717 1680</code>, daily from 9 am to 2 am. For Fibre broadband issues, press 2 and then 4</p> </li> </ol>"},{"location":"procedures/management-commands/","title":"\u26a1 Management Commands","text":"<p>Overview</p> <p>Management commands for all common Mistia Labs operations</p>"},{"location":"procedures/management-commands/#mistia-nexus","title":"Mistia Nexus","text":""},{"location":"procedures/management-commands/#ssh-into-the-nas","title":"\ud83d\udd11 SSH into the NAS","text":"<p>SSH Key</p> <p>SSH Key has been setup. Unlock Bitwarden app to use as SSH agent.</p> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre>"},{"location":"procedures/management-commands/#directory","title":"\ud83d\udcc1 Directory","text":"<pre><code>/volume1/               # NVMe volume for Applications\n\n/volume2/               # HDD raid volume for Data\n\u251c\u2500\u2500 Backups/            # Main backup location  \n\u251c\u2500\u2500 Mistia/             # Main cloud files\n\u2514\u2500\u2500 docker/             \n    \u2514\u2500\u2500 mistia-nexus/   # Mistia Labs deployment\n</code></pre>"},{"location":"procedures/management-commands/#service-management","title":"\u2699\ufe0f Service Management","text":"<p>Operating Directory</p> <p>This is assume to be in <code>/volume2/docker/mistia-nexus</code></p>"},{"location":"procedures/management-commands/#start-all-services","title":"Start All Services","text":"<p>This script starts all non-critical services defined in the <code>mistia-nexus</code> directory. It intelligently detects the active proxy service (Caddy or Nginx-Proxy) and starts it first to ensure proper routing for other services. Services with a <code>.critical</code> or <code>.ignore</code> file in their directory will be skipped.</p> start-all.sh <pre><code>\n</code></pre> <pre><code># Start all services\n./scripts/start-all.sh\n</code></pre>"},{"location":"procedures/management-commands/#stop-all-services","title":"Stop All Services","text":"<p>This script gracefully stops all non-critical services. It identifies the active proxy and stops it last to prevent connection errors for services that might depend on it. Services with a <code>.critical</code> file in their directory will be skipped.</p> stop-all.sh <pre><code>\n</code></pre> <pre><code># Stop all services (respects .critical files)\n./scripts/stop-all.sh\n</code></pre>"},{"location":"procedures/management-commands/#update-all-services","title":"Update All Services","text":"<p>This script performs a comprehensive update of the entire stack. It stops all services, syncs with the latest code from the Git repository, pulls or builds the newest Docker images for services that are not ignored (via <code>.critical</code> or <code>.ignore</code> files), and then restarts everything.</p> update-all.sh <pre><code>\n</code></pre> <pre><code># Update all services (stop-all.sh, git fetch, docker compose pull, start-all.sh)\n./scripts/update-all.sh\n</code></pre>"},{"location":"procedures/management-commands/#start-single-service","title":"Start Single Service","text":"<p>Use this script to start a specific service by name.</p> start.sh <pre><code># Start a single service (e.g., filecloud)\n./scripts/start.sh filecloud\n</code></pre>"},{"location":"procedures/management-commands/#stop-single-service","title":"Stop Single Service","text":"<p>Use this script to stop a specific service by name.</p> stop.sh <pre><code># Stop a single service (e.g., filecloud)\n./scripts/stop.sh filecloud\n</code></pre>"},{"location":"procedures/management-commands/#update-single-service","title":"Update Single Service","text":"<p>Use this script to update a specific service without affecting the rest of the stack. It\u2019s useful for targeted updates or when a service\u2019s configuration has changed.</p> <p>Update Critical Service</p> <p>Use this to update service that was tagged with .critical</p> update.sh <pre><code># Update single service (e.g., caddy)\n./scripts/update.sh caddy\n</code></pre>"},{"location":"procedures/management-commands/#add-new-service","title":"Add New Service","text":"<p>This script adds a new service to the running stack without requiring a full restart. It fetches the latest configuration from Git, verifies the new service directory, updates the active reverse proxy, and then starts the new service.</p> add-service.sh <pre><code># Add a new service (e.g., jellyfin)\n./scripts/add-service.sh jellyfin\n</code></pre>"},{"location":"procedures/management-commands/#git-update","title":"Git Update","text":"<p>This script manually syncs the local deployment with the <code>main</code> branch of the Git repository, ensuring all scripts and configurations are up-to-date.</p> git-update.sh <pre><code>\n</code></pre> <pre><code># Update the entire stack from Git\n./scripts/git-update.sh\n</code></pre>"},{"location":"procedures/management-commands/#verify-backups","title":"Verify Backups","text":"<p>This script runs a full backup and restore cycle for a test file to verify the integrity of the Duplicati backup configuration. It requires the encryption passphrase to run.</p> verify-backup.sh <pre><code># Verify the latest backup\n./scripts/verify-backup.sh\n</code></pre>"},{"location":"procedures/security-hardening/","title":"Security Hardening","text":""},{"location":"procedures/security-hardening/#overview","title":"Overview","text":"<p>Comprehensive security hardening procedures for Mistia-Nexus infrastructure to minimize attack surface and strengthen defensive capabilities.</p>"},{"location":"procedures/security-hardening/#system-hardening","title":"System Hardening","text":""},{"location":"procedures/security-hardening/#docker-security","title":"Docker Security","text":""},{"location":"procedures/security-hardening/#container-configuration","title":"Container Configuration","text":"<pre><code># Security-focused docker-compose.yml\nversion: '3.8'\nservices:\n  service-name:\n    # Run as non-root user\n    user: \"1000:1000\"\n\n    # Security options\n    security_opt:\n      - no-new-privileges:true\n      - apparmor:docker-default\n\n    # Read-only root filesystem\n    read_only: true\n\n    # Temporary filesystems\n    tmpfs:\n      - /tmp:noexec,nosuid,size=100m\n      - /var/tmp:noexec,nosuid,size=50m\n\n    # Resource limits\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n        reservations:\n          memory: 256M\n\n    # Drop all capabilities, add only required ones\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETGID\n      - SETUID\n</code></pre>"},{"location":"procedures/security-hardening/#network-security","title":"Network Security","text":"<pre><code># Create isolated networks\nnetworks:\n  frontend:\n    driver: bridge\n    internal: false  # Internet access via proxy only\n  backend:\n    driver: bridge\n    internal: true   # No internet access\n</code></pre>"},{"location":"procedures/security-hardening/#host-system-hardening","title":"Host System Hardening","text":""},{"location":"procedures/security-hardening/#ssh-configuration","title":"SSH Configuration","text":"<pre><code># /etc/ssh/sshd_config\nProtocol 2\nPermitRootLogin no\nPasswordAuthentication no\nPubkeyAuthentication yes\nMaxAuthTries 3\nClientAliveInterval 300\nClientAliveCountMax 2\nAllowUsers your-username\n</code></pre>"},{"location":"procedures/security-hardening/#firewall-rules","title":"Firewall Rules","text":"<pre><code># UFW configuration\nufw default deny incoming\nufw default allow outgoing\nufw allow ssh\nufw allow 80/tcp\nufw allow 443/tcp\nufw allow 53/tcp\nufw allow 53/udp\nufw enable\n</code></pre>"},{"location":"procedures/security-hardening/#fail2ban-configuration","title":"Fail2Ban Configuration","text":"<pre><code># /etc/fail2ban/jail.local\n[DEFAULT]\nbantime = 3600\nfindtime = 600\nmaxretry = 3\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\n</code></pre>"},{"location":"procedures/security-hardening/#application-security","title":"Application Security","text":""},{"location":"procedures/security-hardening/#caddy-security-headers","title":"Caddy Security Headers","text":"<pre><code># Security headers for all sites\n(security_headers) {\n    header {\n        # HSTS\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n\n        # Content Security Policy\n        Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'\"\n\n        # Other security headers\n        X-Content-Type-Options \"nosniff\"\n        X-Frame-Options \"DENY\"\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy \"strict-origin-when-cross-origin\"\n        Permissions-Policy \"geolocation=(), microphone=(), camera=()\"\n\n        # Remove server information\n        -Server\n        -X-Powered-By\n    }\n}\n\n# Apply to all sites\n*.homelab.local {\n    import security_headers\n    # ... rest of configuration\n}\n</code></pre>"},{"location":"procedures/security-hardening/#database-security","title":"Database Security","text":"<pre><code># PostgreSQL security configuration\nenvironment:\n  POSTGRES_DB: ${DB_NAME}\n  POSTGRES_USER: ${DB_USER}\n  POSTGRES_PASSWORD_FILE: /run/secrets/db_password\n  POSTGRES_INITDB_ARGS: \"--auth-host=scram-sha-256 --auth-local=scram-sha-256\"\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n\nvolumes:\n  - db_data:/var/lib/postgresql/data:Z\n</code></pre>"},{"location":"procedures/security-hardening/#secret-management","title":"Secret Management","text":""},{"location":"procedures/security-hardening/#docker-secrets","title":"Docker Secrets","text":"<pre><code># Create secrets directory\nmkdir -p ./secrets\nchmod 700 ./secrets\n\n# Generate strong passwords\nopenssl rand -base64 32 &gt; ./secrets/db_password.txt\nopenssl rand -base64 32 &gt; ./secrets/admin_password.txt\n\n# Set proper permissions\nchmod 600 ./secrets/*.txt\n</code></pre>"},{"location":"procedures/security-hardening/#environment-variables","title":"Environment Variables","text":"<pre><code># .env file security\nchmod 600 .env\n\n# Example secure .env\nDB_USER=app_user\nDB_NAME=application_db\nADMIN_EMAIL=admin@yourdomain.com\nBACKUP_ENCRYPTION_KEY_FILE=/run/secrets/backup_key\n</code></pre>"},{"location":"procedures/security-hardening/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"procedures/security-hardening/#log-monitoring","title":"Log Monitoring","text":"<pre><code># Centralized logging with security focus\nversion: '3.8'\nservices:\n  logspout:\n    image: gliderlabs/logspout:latest\n    command: syslog://logserver:514\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    depends_on:\n      - logserver\n</code></pre>"},{"location":"procedures/security-hardening/#intrusion-detection","title":"Intrusion Detection","text":"<pre><code># AIDE configuration for file integrity monitoring\naide --init\naide --check\n\n# Automated checks via cron\necho \"0 2 * * * /usr/bin/aide --check\" | crontab -\n</code></pre>"},{"location":"procedures/security-hardening/#security-scanning","title":"Security Scanning","text":"<pre><code># Docker image vulnerability scanning\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy:latest image caddy:latest\n\n# Container runtime security\ndocker run --rm --cap-add SYS_ADMIN \\\n  --pid host --net host \\\n  aquasec/kube-bench:latest\n</code></pre>"},{"location":"procedures/security-hardening/#backup-security","title":"Backup Security","text":""},{"location":"procedures/security-hardening/#encrypted-backups","title":"Encrypted Backups","text":"<pre><code>#!/bin/bash\n# Secure backup script\n\nBACKUP_DIR=\"/var/backups/mistia-nexus\"\nENCRYPTION_KEY=\"/etc/backup/encryption.key\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create encrypted backup\ntar czf - /path/to/data | \\\ngpg --cipher-algo AES256 --compress-algo 1 --symmetric \\\n    --passphrase-file \"$ENCRYPTION_KEY\" \\\n    --output \"$BACKUP_DIR/backup_$DATE.tar.gz.gpg\"\n\n# Verify backup integrity\ngpg --passphrase-file \"$ENCRYPTION_KEY\" --decrypt \\\n    \"$BACKUP_DIR/backup_$DATE.tar.gz.gpg\" | \\\n    tar tzf - &gt; /dev/null\n\nif [ $? -eq 0 ]; then\n    echo \"Backup verification successful\"\nelse\n    echo \"Backup verification failed\" &gt;&amp;2\n    exit 1\nfi\n</code></pre>"},{"location":"procedures/security-hardening/#backup-rotation","title":"Backup Rotation","text":"<pre><code># Automated backup rotation\nfind \"$BACKUP_DIR\" -name \"backup_*.tar.gz.gpg\" -mtime +30 -delete\n\n# Keep last 7 daily, 4 weekly, 12 monthly backups\n# (Implementation depends on backup strategy)\n</code></pre>"},{"location":"procedures/security-hardening/#access-control","title":"Access Control","text":""},{"location":"procedures/security-hardening/#multi-factor-authentication","title":"Multi-Factor Authentication","text":"<pre><code># Authelia configuration example\nversion: '3.8'\nservices:\n  authelia:\n    image: authelia/authelia:latest\n    container_name: authelia\n    volumes:\n      - ./authelia:/config\n    environment:\n      - TZ=UTC\n    restart: unless-stopped\n    networks:\n      - mistia-network\n</code></pre>"},{"location":"procedures/security-hardening/#role-based-access","title":"Role-Based Access","text":"<pre><code># Portainer RBAC example\nusers:\n  - username: admin\n    role: administrator\n  - username: operator\n    role: operator\n    teams:\n      - homelab-ops\n</code></pre>"},{"location":"procedures/security-hardening/#incident-response","title":"Incident Response","text":""},{"location":"procedures/security-hardening/#automated-response","title":"Automated Response","text":"<pre><code>#!/bin/bash\n# Security incident response script\n\nINCIDENT_TYPE=\"$1\"\nAFFECTED_SERVICE=\"$2\"\n\ncase \"$INCIDENT_TYPE\" in\n    \"intrusion\")\n        # Isolate affected containers\n        docker network disconnect mistia-network \"$AFFECTED_SERVICE\"\n        # Capture forensic data\n        docker logs \"$AFFECTED_SERVICE\" &gt; \"/var/log/incident_${AFFECTED_SERVICE}.log\"\n        # Alert administrators\n        echo \"Security incident detected\" | mail -s \"SECURITY ALERT\" admin@yourdomain.com\n        ;;\n    \"malware\")\n        # Stop affected service\n        docker stop \"$AFFECTED_SERVICE\"\n        # Quarantine container\n        docker rename \"$AFFECTED_SERVICE\" \"${AFFECTED_SERVICE}_quarantine\"\n        ;;\nesac\n</code></pre>"},{"location":"procedures/security-hardening/#emergency-procedures","title":"Emergency Procedures","text":"<ol> <li>Immediate Isolation</li> </ol> <pre><code># Disconnect from networks\ndocker network disconnect mistia-network service-name\n\n# Stop all services if necessary\ncd /path/to/mistia-nexus &amp;&amp; docker-compose down\n</code></pre> <ol> <li>Evidence Preservation</li> </ol> <pre><code># Capture container state\ndocker commit service-name evidence-snapshot\n\n# Export logs\ndocker logs service-name &gt; incident-logs.txt\n</code></pre> <ol> <li>Communication Plan    - Internal team notification    - Stakeholder updates    - External reporting (if required)</li> </ol>"},{"location":"procedures/security-hardening/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"procedures/security-hardening/#audit-logging","title":"Audit Logging","text":"<pre><code># Comprehensive audit logging\nlogging:\n  driver: \"json-file\"\n  options:\n    max-size: \"10m\"\n    max-file: \"3\"\n    labels: \"service,environment\"\n</code></pre>"},{"location":"procedures/security-hardening/#compliance-checks","title":"Compliance Checks","text":"<pre><code># Regular security checklist\n- [ ] All containers running as non-root\n- [ ] Security updates applied\n- [ ] Certificates valid and current\n- [ ] Backup encryption working\n- [ ] Access logs reviewed\n- [ ] Vulnerability scans completed\n- [ ] Incident response plan tested\n</code></pre>"},{"location":"procedures/security-hardening/#automation-scripts","title":"Automation Scripts","text":""},{"location":"procedures/security-hardening/#security-update-script","title":"Security Update Script","text":"<pre><code>#!/bin/bash\n# Automated security updates\n\n# Update system packages\napt update &amp;&amp; apt upgrade -y\n\n# Update Docker images\ndocker-compose pull\ndocker-compose up -d\n\n# Clean up old images\ndocker image prune -a -f\n\n# Restart security services\nsystemctl restart fail2ban\nsystemctl restart ufw\n</code></pre>"},{"location":"procedures/security-hardening/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# Security health check\n\nFAILED_CHECKS=0\n\n# Check if all services are running\nif ! docker-compose ps | grep -q \"Up\"; then\n    echo \"WARNING: Some services are not running\"\n    ((FAILED_CHECKS++))\nfi\n\n# Check SSL certificates\nif ! openssl s_client -connect localhost:443 -servername homelab.local &lt; /dev/null 2&gt;/dev/null | \\\n     openssl x509 -checkend 2592000 -noout; then\n    echo \"WARNING: SSL certificate expires within 30 days\"\n    ((FAILED_CHECKS++))\nfi\n\n# Check for security updates\nif apt list --upgradable 2&gt;/dev/null | grep -q security; then\n    echo \"WARNING: Security updates available\"\n    ((FAILED_CHECKS++))\nfi\n\nexit $FAILED_CHECKS\n</code></pre>"},{"location":"procedures/ssh-troubleshooting/","title":"\ud83d\udd11 Troubleshooting SSH Authentication","text":"<p>Overview</p> <p>This guide provides definitive steps to resolve <code>Permission denied (publickey,password)</code> errors. If you are being prompted for a password instead of using your SSH key, it almost always means the SSH server on the NAS is not configured correctly or the key itself is not properly installed.</p>"},{"location":"procedures/ssh-troubleshooting/#check-the-ssh-permission-service-on-the-nas","title":"\ud83d\udcdd Check the SSH Permission Service on the NAS","text":"<p>Your NAS uses a custom service to ensure SSH file permissions remain correct. If this service is not running, authentication will fail.</p> <ol> <li> <p>Log into your NAS using your username and password.</p> </li> <li> <p>Check the service status:</p> <pre><code>sudo systemctl status mistia-nexus-ssh-permission.service\n</code></pre> <ul> <li>If it shows <code>active (running)</code>, the service is fine. Proceed to Step 2 of this guide.</li> <li>If it shows <code>inactive (dead)</code> or <code>failed</code>, continue to the next step.</li> </ul> </li> <li> <p>Reset and Start the Service:     If the service failed too many times, you may need to reset its failure counter first.</p> <pre><code>sudo systemctl reset-failed mistia-nexus-ssh-permission.service\nsudo systemctl start mistia-nexus-ssh-permission.service\n</code></pre> </li> <li> <p>Check the Logs if it Fails Again:     If the service still won\u2019t start, view its logs to find the specific error.</p> <pre><code>journalctl -u mistia-nexus-ssh-permission.service -n 50 --no-pager\n</code></pre> <p>A common error is <code>inotifywait: command not found</code>. If you see this, you need to install the required tools with <code>sudo apt install inotify-tools</code>. Once you fix the underlying issue, try starting the service again.</p> </li> </ol>"},{"location":"procedures/ssh-troubleshooting/#verify-the-authorized-key-and-permissions","title":"\ud83d\udd10 Verify the Authorized Key and Permissions","text":"<p>If the permission service is running correctly, the next step is to ensure the correct public key is on the NAS and has the right permissions.</p> <ol> <li> <p>Generate the Correct Public Key in WSL     From your WSL terminal, read your private key and print the public part to the screen. This command does not change your key; it only displays the public portion.</p> <pre><code>ssh-keygen -y -f ~/.ssh/id_ed25519\n</code></pre> <p>Copy the entire output line (starting with <code>ssh-ed25519 AAAA...</code>) to your clipboard.</p> </li> <li> <p>Overwrite the Key on the NAS</p> <ul> <li>Log into your NAS using your username and password.</li> <li>Open the <code>authorized_keys</code> file: <code>nano ~/.ssh/authorized_keys</code></li> <li>Delete all existing content and paste the new public key you copied from WSL.</li> <li>Save and exit (<code>Ctrl+X</code>, <code>Y</code>, <code>Enter</code>).</li> </ul> </li> <li> <p>Enforce Correct Permissions on the NAS</p> <ul> <li>While still on the NAS, run these critical permission commands:</li> </ul> <pre><code>chmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n</code></pre> </li> </ol>"},{"location":"procedures/ssh-troubleshooting/#enable-public-key-authentication-on-the-ssh-server","title":"\ud83d\udcc3 Enable Public Key Authentication on the SSH Server","text":"<p>Next, ensure the SSH server itself is configured to accept keys.</p> <ol> <li> <p>Log into your NAS using your username and password.</p> </li> <li> <p>Run the following command on the NAS to open the SSH server\u2019s main configuration file.</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> </li> <li> <p>Inside the file, look for the line <code>PubkeyAuthentication</code>. Ensure it is uncommented (no <code>#</code> at the beginning) and set to <code>yes</code>.</p> <pre><code>PubkeyAuthentication yes\n</code></pre> </li> <li> <p>Press <code>Ctrl+X</code>, then <code>Y</code>, then <code>Enter</code> to save the file.</p> </li> <li> <p>Restart the SSH server on the NAS to apply the changes.</p> <pre><code>sudo systemctl restart sshd\n</code></pre> </li> <li> <p>Test the Connection     Now, from your Windows Terminal (with Bitwarden running) and from WSL, try to connect again. The key should now work, and you should not be prompted for a password.</p> <pre><code># From WSL\nansible nas -m ping\n</code></pre> <p>If the connection is successful, proceed to the final step.</p> </li> </ol>"},{"location":"services/adguard-home/","title":"AdGuard Home","text":"<p>Overview</p> <p>AdGuard Home is a powerful, network-wide ad and tracker blocking DNS server that acts as a centralized shield for your entire network, removing ads, trackers, and malicious domains from all your devices. By routing your network\u2019s DNS traffic through AdGuard Home, you gain granular control over what content is accessed, significantly enhancing your privacy and browsing experience.</p>"},{"location":"services/adguard-home/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://adguard.mistia.xyz http://192.168.50.2</p> <p> adguard-home \u00a0\u00a0\u00a0  adguard/adguardhome:latest</p> Host Ports Container Ports Network Host Path Container Path Direct IP <code>53/tcp, 53/udp, 80</code><code>443/tcp, 443/udp</code><code>853/tcp, 853/udp</code> <code>adguard-net</code> <code>adguard-home/confdir</code><code>adguard-home/workdir</code><code>caddy/data</code> <code>/opt/adguardhome/conf</code><code>/opt/adguardhome/work</code><code>/opt/adguardhome/certs:ro</code>"},{"location":"services/adguard-home/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/adguard-home/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<ul> <li>Dedicated IP: <code>192.168.50.2</code></li> <li>Network Interface: Create a virtual bridge on UGREEN NASync to be used for AdGuard Home container\u2019s Macvlan network</li> </ul>"},{"location":"services/adguard-home/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/adguard-home/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 adguard-home/          \n    \u251c\u2500\u2500 .critical             # Prevents this service from being managed by start/stop scripts\n    \u251c\u2500\u2500 docker-compose.yml    # Defines the AdGuard Home service, network, and volumes\n    \u251c\u2500\u2500 confdir/              # Mapped volume\n    \u2514\u2500\u2500 workdir/              # Mapped volume\n</code></pre>"},{"location":"services/adguard-home/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/opt/adguardhome/\n\u251c\u2500\u2500 conf/                  # Stores the main AdGuard Home configuration\n\u2502   \u2514\u2500\u2500 AdGuardHome.yaml   # The primary YAML configuration file for the service\n\u2514\u2500\u2500 work/                  # Contains dynamic data, logs, and filters\n    \u2514\u2500\u2500 data/              \n        \u251c\u2500\u2500 filters/       # Caches the filter lists used for blocking\n        \u251c\u2500\u2500 stats.db       # Holds the statistical data for the dashboard\n        \u2514\u2500\u2500 sessions.db    # Manages user session information\n</code></pre>"},{"location":"services/adguard-home/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  adguardhome:\n    image: adguard/adguardhome:latest\n    container_name: adguard-home\n    hostname: adguard-home\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 4096M\n        reservations:\n          cpus: '0.25'\n          memory: 128M\n    healthcheck:\n      test:\n        [\n          'CMD-SHELL',\n          'wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1'\n        ]\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=AdGuard Home'\n      - 'com.mistia-nexus.service.type=DNS Sinkhole'\n    environment:\n      - TZ=Asia/Singapore\n    networks:\n      adguard-net:\n        ipv4_address: 192.168.50.2\n    volumes:\n      - ./workdir:/opt/adguardhome/work\n      - ./confdir:/opt/adguardhome/conf\n      - ../caddy/data:/opt/adguardhome/certs:ro\n    restart: unless-stopped\n\nnetworks:\n  adguard-net:\n    driver: macvlan\n    driver_opts:\n      parent: bridge0\n    ipam:\n      config:\n        - subnet: 192.168.50.0/24\n          gateway: 192.168.50.1\n</code></pre>"},{"location":"services/adguard-home/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>adguard.mistia.xyz {\n    import security_headers\n\n    # DNS-over-HTTPS endpoint\n    handle /dns-query* {\n        reverse_proxy https://192.168.50.2:443 {\n            import proxy_headers\n            transport http {\n                tls\n            }\n        }\n    }\n\n    # AdGuard Home UI\n    handle {\n        reverse_proxy http://192.168.50.2:80 {\n            import proxy_headers\n        }\n    }\n}\n</code></pre>"},{"location":"services/adguard-home/#ansible","title":"Ansible","text":""},{"location":"services/adguard-home/#ansible-vault","title":"Ansible Vault","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/adguard-home/#secrets-template","title":"Secrets Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/adguard-home/#env-template","title":".env Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/adguard-home/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/adguard-home/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/adguard-home/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags adguard-home\n</code></pre>"},{"location":"services/adguard-home/#post-deployment","title":"\u2699\ufe0f Post-Deployment","text":""},{"location":"services/adguard-home/#host-network-bridge","title":"\ud83c\udf09 Host Network Bridge","text":"<p>Follow the instructions at Configure DNS Sinkhole to setup the startup service in UGREEN NASync</p> <p>Required Setup</p> <p>AdGuard uses macvlan networking, which requires a virtual interface on the host to enable communication between the NAS and the container. This configuration resets on UGREEN NAS reboot.</p> mistia-nexus-macvlan-host.sh<pre><code>#!/bin/bash\nsudo ip link add macvlan-host link bridge0 type macvlan mode bridge\nsudo ip addr add 192.168.50.3/24 dev macvlan-host\nsudo ip link set macvlan-host up\nsudo ip route add 192.168.50.2/32 dev macvlan-host\n</code></pre> <p>Virtual Bridge Automation</p> <p>The host network bridge required for the host to communicate with the macvlan container will be managed automatically by a systemd service.</p> mistia-nexus-macvlan-host.service<pre><code>[Unit]\nDescription=Create macvlan host interface for Docker containers\nWants=network.target\nAfter=network.target\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/mistia-nexus-macvlan-host.sh\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"services/adguard-home/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/adguard-home/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to http://192.168.50.2:3000</p> </li> <li> <p>Complete the setup wizard</p> <ul> <li>Click Get Started</li> <li>Web Interface:<ul> <li>Leave the listen interface as <code>All interfaces</code> and the port as <code>80</code></li> </ul> </li> <li>DNS Server:<ul> <li>Leave the listen interface as <code>All interfaces</code> and the port as <code>53</code></li> </ul> </li> <li>Authentication:<ul> <li>Create username and password for your AdGuard Home admin panel</li> </ul> </li> <li>Done: Finish the setup</li> </ul> </li> </ol>"},{"location":"services/adguard-home/#configure-adguard-settings","title":"\u2699\ufe0f Configure AdGuard Settings","text":"<p>Follow the instructions in this Github Repo to configure the rest of the settings</p>"},{"location":"services/adguard-home/#encryption-settings","title":"Encryption Settings","text":"<ol> <li> <p>Navigate to AdGuard Home \u00bb Settings \u00bb Encryption settings</p> </li> <li> <p>Check Enable Encryption (HTTPS, DNS-over-HTTPS, and DNS-over-TLS)</p> </li> <li> <p>Server name: <code>adguard.mistia.xyz</code></p> </li> <li> <p>Do not check Redirect to HTTPS automatically</p> </li> <li> <p>Certificates:    - Select Set a certificates files path    - Enter: <code>/opt/adguardhome/certs/caddy/certificates/acme-v02.api.letsencrypt.org-directory/adguard.mistia.xyz/adguard.mistia.xyz.crt</code></p> </li> <li> <p>Private key    - Select Set a private key file    - Enter: <code>/opt/adguardhome/certs/caddy/certificates/acme-v02.api.letsencrypt.org-directory/adguard.mistia.xyz/adguard.mistia.xyz.key</code></p> </li> <li> <p>Click <code>Save configuration</code></p> </li> </ol> <p>To use DoH: https://adguard.mistia.xyz/dns-query To use Dot: tls://adguard.mistia.xyz/dns-query</p>"},{"location":"services/caddy/","title":"Caddy","text":"<p>Overview</p> <p>Caddy is an automatic HTTPS reverse proxy that handles all external traffic, provides valid certificates, and routes requests to the appropriate internal services. It uses the Cloudflare DNS plugin to complete challenges, ensuring secure and encrypted connections for the homelab.</p>"},{"location":"services/caddy/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://caddy.mistia.xyz (Caddy Admin API)</p> <p> caddy \u00a0\u00a0\u00a0  caddy:latest</p> Host Ports Container Ports Network Host Path Container Path <code>80, 443, 853</code> <code>80, 443/tcp, 443/udp, 853</code> <code>mistia-proxy-net</code> <code>caddy/Caddyfile</code><code>caddy/config</code><code>caddy/data</code><code>caddy/www</code> <code>/etc/caddy/Caddyfile</code><code>/config</code><code>/data</code><code>/srv/www</code>"},{"location":"services/caddy/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Internal DNS rewrite: AdGuard Home configured to resolve <code>*.mistia.xyz</code> to <code>192.168.50.4</code></li> <li>Cloudflare API Token: For automatic HTTPS certificate issuance using Let\u2019s Encrypt via the DNS-01 challenge.</li> </ul> <p>mistia-proxy-net</p> <p>The <code>mistia-proxy-net</code> network will be created by this container</p>"},{"location":"services/caddy/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/caddy/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 caddy/\n    \u251c\u2500\u2500 .env                # Application secrets\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Caddy service, build, network, and volumes\n    \u251c\u2500\u2500 Dockerfile          # Builds the Caddy image with the required plugins\n    \u251c\u2500\u2500 Caddyfile           # The main configuration file for reverse proxy routing\n    \u251c\u2500\u2500 data/               # Mapped volume\n    \u251c\u2500\u2500 www/                # Mapped volume for static files\n    \u251c\u2500\u2500 db_data/            # Stores internal database files used by Caddy\n    \u2514\u2500\u2500 letsencrypt/        # Contains SSL/TLS certificates issued by Let's Encrypt\n</code></pre>"},{"location":"services/caddy/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/\n\u251c\u2500\u2500 etc/caddy/\n\u2502   \u2514\u2500\u2500 Caddyfile   # The loaded Caddy configuration file\n\u251c\u2500\u2500 data/           # Stores certificates and other persistent Caddy data\n\u2514\u2500\u2500 srv/www/        # Serves static files \n</code></pre>"},{"location":"services/caddy/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  caddy:\n    build: .\n    container_name: caddy\n    hostname: caddy\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    user: \"1000:10\"\n    read_only: true\n    tmpfs:\n      - /tmp\n    cap_drop:\n      - ALL\n    cap_add:\n      - NET_BIND_SERVICE\n    deploy:\n      resources:\n        limits:\n          cpus: '0.75'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 128M\n    labels:\n      - 'com.mistia-nexus.service.name=Caddy'\n      - 'com.mistia-nexus.service.type=Reverse Proxy'\n    environment:\n      - TZ=Asia/Singapore\n      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}\n      - CADDY_EMAIL=${CADDY_EMAIL}\n    volumes:\n      - ./Caddyfile:/etc/caddy/Caddyfile\n      - ./data:/data\n      - ./config:/config\n      - ./www:/srv/www\n    healthcheck:\n      test: ['CMD', 'curl', '-f', 'http://localhost/healthz']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '443:443'\n      - '443:443/udp'\n      - '853:853'\n    networks:\n      - mistia-proxy-net\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/caddy/#dockerfile","title":"\ud83d\udc0b Dockerfile","text":"Dockerfile<pre><code># syntax=docker/dockerfile:1\nFROM caddy:latest\nRUN caddy add-package github.com/caddy-dns/cloudflare\nRUN caddy add-package github.com/ueffel/caddy-brotli\nRUN caddy add-package github.com/mholt/caddy-l4\nRUN apk add --no-cache curl\n</code></pre>"},{"location":"services/caddy/#caddyfile","title":"\ud83d\udd00 Caddyfile","text":"Caddyfile<pre><code># --- Global Options ---\n{\n    email {env.CADDY_EMAIL}\n    acme_dns cloudflare {env.CLOUDFLARE_API_TOKEN}\n    admin :2019 {\n        origins caddy.mistia.xyz\n    }\n\n    # --- DNS over TLS ---\n    layer4 {\n        :853 {\n            route {\n                proxy 192.168.50.2:853\n            }\n        }\n    }\n}\n\n# --- Health Check Endpoint ---\n:80 {\n    handle /healthz {\n        respond \"OK\" 200\n    }\n}\n\n(security_headers) {\n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n        X-Frame-Options \"SAMEORIGIN\"\n        X-Content-Type-Options \"nosniff\"\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy \"strict-origin-when-cross-origin\"\n        -Server\n    }\n}\n\n(proxy_headers) {\n    header_up Host {http.request.host}\n    header_up X-Real-IP {http.request.remote.ip}\n    header_up X-Forwarded-For {http.request.remote.ip}\n}\n\n# --- Dedicated AdGuard Home Block ---\n# This block gets a specific certificate for AdGuard Home\nadguard.mistia.xyz {\n    import security_headers\n\n    # DNS-over-HTTPS endpoint\n    handle /dns-query* {\n        reverse_proxy https://192.168.50.2:443 {\n            import proxy_headers\n            transport http {\n                tls\n            }\n        }\n    }\n\n    # AdGuard Home UI\n    handle {\n        reverse_proxy http://192.168.50.2:80 {\n            import proxy_headers\n        }\n    }\n}\n\n# --- Main Site Block with Wildcard Certificate ---\n*.mistia.xyz {\n    import security_headers\n    encode zstd br gzip\n\n    # --- Public Site Redirects ---\n\n  # @docs host docs.mistia.xyz\n  # handle @docs {\n  #   redir https://{host}{uri} 301\n  # }\n\n  # @claim host claim.mistia.xyz\n  # handle @claim {\n  #   redir https://{host}{uri} 301\n  # }\n\n    # --- Local Service Routing ---\n\n    @nexus host nexus.mistia.xyz\n    handle @nexus {\n        reverse_proxy https://192.168.50.4:9443 {\n            import proxy_headers\n            transport http {\n                tls_insecure_skip_verify\n            }\n        }\n    }\n\n    @asus_et12 host asus-et12.mistia.xyz\n    handle @asus_et12 {\n        reverse_proxy https://192.168.50.1:8443 {\n            import proxy_headers\n            transport http {\n                tls_insecure_skip_verify\n            }\n        }\n    }\n\n    @caddyadmin host caddy.mistia.xyz\n    handle @caddyadmin {\n        reverse_proxy http://caddy:2019 {\n            import proxy_headers\n        }\n    }\n\n    @portainer host portainer.mistia.xyz\n    handle @portainer {\n        reverse_proxy http://portainer:9000 {\n            import proxy_headers\n        }\n    }\n\n    @dockge host dockge.mistia.xyz\n    handle @dockge {\n        reverse_proxy http://dockge:5001 {\n            import proxy_headers\n        }\n    }\n\n    @dozzle host dozzle.mistia.xyz\n    handle @dozzle {\n        reverse_proxy http://dozzle:8080 {\n            import proxy_headers\n      transport http {\n            dial_timeout 10s\n            response_header_timeout 0s\n        }\n        }\n    }\n\n    @kuma host kuma.mistia.xyz\n    handle @kuma {\n        reverse_proxy http://uptime-kuma:3001 {\n            import proxy_headers\n        }\n    }\n\n    @duplicati host duplicati.mistia.xyz\n    handle @duplicati {\n        reverse_proxy http://duplicati:8200 {\n            import proxy_headers\n        }\n    }\n\n    @nextcloud host nextcloud.mistia.xyz\n    handle @nextcloud {\n        reverse_proxy http://nextcloud:80 {\n            import proxy_headers\n        }\n    }\n\n    # --- Fallback for unknown domains ---\n    handle {\n        root * /srv/www\n        rewrite * /404.html\n        file_server\n    }\n}\n</code></pre>"},{"location":"services/caddy/#custom-404","title":"\ud83d\udd00 Custom 404","text":"404.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;404 Not Found&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n      background-color: #121212;\n      color: #e0e0e0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      text-align: center;\n    }\n\n    .container {\n      max-width: 600px;\n    }\n\n    h1 {\n      font-size: 3em;\n      color: #bb86fc;\n    }\n\n    p {\n      font-size: 1.2em;\n    }\n\n    a {\n      color: #03dac6;\n      text-decoration: none;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;h1&gt;404 Not Found&lt;/h1&gt;\n    &lt;p&gt;The page you're looking for doesn't exist or has been moved.&lt;/p&gt;\n    &lt;p&gt;Return to &lt;a href=\"https://mistia.xyz\"&gt;mistia.xyz&lt;/a&gt;&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"services/caddy/#ansible","title":"Ansible","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre>"},{"location":"services/caddy/#ansible-vault","title":"Ansible Vault","text":"<pre><code>nexus_vault\n</code></pre> <p>Press I to enter <code>Insert Mode</code></p> secrets.yml<pre><code>cloudflare_api_token: \"your-cloudflare-api-token\"\ncaddy_email: \"address@email.com\"\n</code></pre> <p>Press Esc to exit <code>Insert Mode</code></p> <p>Type : W Q and press Enter to save and exit</p>"},{"location":"services/caddy/#secrets-template","title":"Secrets Template","text":"<pre><code>nano ansible/mistia-nexus/secrets.template.yml\n</code></pre> secrets.template.yml<pre><code>cloudflare_api_token: \"\"\ncaddy_email: \"\"\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/caddy/#env-template","title":".env Template","text":"<pre><code>touch ansible/mistia-nexus/templates/caddy.env.j2\nnano ansible/mistia-nexus/template/caddy.env.j2\n</code></pre> caddy.env.j2<pre><code>CLOUDFLARE_API_TOKEN={{ cloudflare_api_token }}\nCADDY_EMAIL={{ caddy_email }}\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/caddy/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/caddy/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/caddy/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags caddy\n</code></pre>"},{"location":"services/dockge/","title":"Dockge","text":"<p>Overview</p> <p>Dockge is a fancy, easy-to-use, and reactive self-hosted docker compose.yaml stack-oriented manager. It allows you to manage your docker-compose files through a user-friendly web interface.</p>"},{"location":"services/dockge/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://dockge.mistia.xyz http://mistia-nexus.local:10002</p> <p> dockge \u00a0\u00a0\u00a0  louislam/dockge:latest</p> Host Ports Container Ports Network Host Path Container Path <code>10002</code> <code>5001</code> <code>mistia-proxy-net</code> <code>./data</code><code>..</code> <code>/app/data</code><code>/stacks</code>"},{"location":"services/dockge/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/dockge/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<p>The <code>mistia-proxy-net</code> network must be available.</p>"},{"location":"services/dockge/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/dockge/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/               # Mapped to /stacks for managing compose files\n\u2514\u2500\u2500 dockge/\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Dockge service, network, and volumes\n    \u2514\u2500\u2500 data/               # Mapped volume for persistent data\n</code></pre>"},{"location":"services/dockge/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/app/data     # Dockge's persistent data\n/stacks       # Location of docker-compose stacks\n</code></pre>"},{"location":"services/dockge/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  dockge:\n    image: louislam/dockge:latest\n    container_name: dockge\n    hostname: dockge\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 256M\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:5001\"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Dockge'\n      - 'com.mistia-nexus.service.type=Management'\n    environment:\n      - TZ=Asia/Singapore\n      - DOCKGE_STACKS_DIR=/stacks\n    ports:\n      - \"10002:5001\"\n    networks:\n      - mistia-proxy-net\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./data:/app/data\n      - ..:/stacks\n    restart: unless-stopped\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/dockge/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>@dockge host dockge.mistia.xyz\nhandle @dockge {\n    reverse_proxy http://dockge:5001 {\n        import proxy_headers\n    }\n}\n</code></pre>"},{"location":"services/dockge/#ansible","title":"Ansible","text":""},{"location":"services/dockge/#ansible-vault","title":"Ansible Vault","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dockge/#secrets-template","title":"Secrets Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dockge/#env-template","title":".env Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dockge/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/dockge/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/dockge/#deployment","title":"\u2728 Deployment","text":"<pre><code>nexus-deploy --tags proxy-reload,dockge\n</code></pre>"},{"location":"services/dockge/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/dockge/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to https://dockge.mistia.xyz</p> </li> <li> <p>Create an administrator account</p> </li> </ol>"},{"location":"services/dozzle/","title":"\ud83d\udc1d Dozzle","text":"<p>Overview</p> <p>Dozzle is a lightweight, real-time log viewer for Docker containers. It provides a simple, web-based interface to monitor container logs without needing to access the terminal, making it easy to troubleshoot and keep an eye on your applications.</p>"},{"location":"services/dozzle/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://dozzle.mistia.xyz http://mistia-nexus.local:10003</p> <p> dozzle \u00a0\u00a0\u00a0  amir20/dozzle:latest</p> Host Ports Container Ports Network Host Path Container Path <code>10003</code> <code>8080</code> <code>mistia-proxy-net</code> <code>/var/run/docker.sock</code> <code>/var/run/docker.sock:ro</code>"},{"location":"services/dozzle/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/dozzle/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<p>The <code>mistia-proxy-net</code> network must be available.</p>"},{"location":"services/dozzle/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/dozzle/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 dozzle/\n    \u2514\u2500\u2500 docker-compose.yml  # Defines the Dozzle service, network, and volumes\n</code></pre>"},{"location":"services/dozzle/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/var/run/docker.sock     # Docker socket for container management\n</code></pre>"},{"location":"services/dozzle/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  dozzle:\n    image: amir20/dozzle:latest\n    container_name: dozzle\n    hostname: dozzle\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 256M\n        reservations:\n          cpus: '0.25'\n          memory: 128M\n    healthcheck:\n      test: [\"CMD\", \"/dozzle\", \"healthcheck\"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Dozzle'\n      - 'com.mistia-nexus.service.type=Monitoring'\n    environment:\n      - TZ=Asia/Singapore\n      - DOZZLE_NO_ANALYTICS=true\n    ports:\n      - \"10003:8080\"\n    networks:\n      - mistia-proxy-net\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: unless-stopped\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/dozzle/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>    @dozzle host dozzle.mistia.xyz\n    handle @dozzle {\n        reverse_proxy http://dozzle:8080 {\n            import proxy_headers\n      transport http {\n            dial_timeout 10s\n            response_header_timeout 0s\n        }\n        }\n    }\n</code></pre>"},{"location":"services/dozzle/#ansible","title":"Ansible","text":""},{"location":"services/dozzle/#ansible-vault","title":"Ansible Vault","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dozzle/#secrets-template","title":"Secrets Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dozzle/#env-template","title":".env Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/dozzle/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/dozzle/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/dozzle/#deployment","title":"\u2728 Deployment","text":"<pre><code>nexus-deploy --tags proxy-reload,dozzle\n</code></pre>"},{"location":"services/duplicati/","title":"Duplicati","text":"<p>Overview</p> <p>Duplicati is a free, open-source backup client that securely stores encrypted, incremental, and compressed backups on various cloud storage services and remote file servers. With features like scheduling, backup verification, and a web-based interface, Duplicati offers a robust solution for protecting the homelab\u2019s critical data.</p>"},{"location":"services/duplicati/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://duplicati.mistia.xyz https://mistia-nexus.local:10101</p> <p> duplicati \u00a0\u00a0\u00a0  lscr.io/linuxserver/duplicati:latest</p> Host Ports Container Ports Network Host Path Container Path <code>10011</code> <code>8200</code> <code>mistia-proxy-net</code> <code>duplicati/config</code><code>/</code> <code>/config</code><code>/nasroot:ro</code>"},{"location":"services/duplicati/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>The <code>mistia-proxy-net</code> network must be available.</li> </ul>"},{"location":"services/duplicati/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/duplicati/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 duplicati/\n    \u251c\u2500\u2500 .env                # Application secrets\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Duplicati service, network, and volumes\n    \u2514\u2500\u2500 config/             # Mapped volume\n</code></pre>"},{"location":"services/duplicati/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/\n\u251c\u2500\u2500 config/   # Stores Duplicati's configuration files and local databases\n\u2514\u2500\u2500 nasroot/  # Read-only mount of the host's entire filesystem for backup source\n</code></pre>"},{"location":"services/duplicati/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"<p>Retrieve the PUID and PGID values for the <code>docker-compose.yml</code></p> <pre><code>ssh late4ever@mistia-nexus.local\nid\n</code></pre> docker-compose.yml<pre><code>services:\n  duplicati:\n    image: lscr.io/linuxserver/duplicati:latest\n    container_name: duplicati\n    hostname: duplicati\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '1.00'\n          memory: 1024M\n        reservations:\n          cpus: '0.25'\n          memory: 256M\n    healthcheck:\n      test: ['CMD', 'curl', '-f', 'http://localhost:8200']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Duplicati'\n      - 'com.mistia-nexus.service.type=Backup'\n    environment:\n      - PUID=1000\n      - PGID=10\n      - TZ=Asia/Singapore\n      - SETTINGS_ENCRYPTION_KEY=${DUPLICATI_SETTINGS_KEY}\n      - DUPLICATI__WEBSERVICE_PASSWORD=${DUPLICATI_UI_PASSWORD}\n    volumes:\n      - ./config:/config\n      - /:/nasroot:ro\n    restart: unless-stopped\n    ports:\n      - '10101:8200'\n    networks:\n      - mistia-proxy-net\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/duplicati/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>@duplicati host duplicati.mistia.xyz\nhandle @duplicati {\n    reverse_proxy http://duplicati:8200 {\n        import proxy_headers\n    }\n}\n</code></pre>"},{"location":"services/duplicati/#ansible","title":"Ansible","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre>"},{"location":"services/duplicati/#ansible-vault","title":"Ansible Vault","text":"<pre><code>nexus_vault\n</code></pre> <p>Press I to enter <code>Insert Mode</code></p> secrets.yml<pre><code>duplicati_settings_key: \"duplicati-settings-key\"\nduplicati_ui_password: \"duplicati-ui-password\"\n</code></pre> <p>Press Esc to exit <code>Insert Mode</code></p> <p>Type : W Q and press Enter to save and exit</p>"},{"location":"services/duplicati/#secrets-template","title":"Secrets Template","text":"<pre><code>nano ansible/mistia-nexus/secrets.template.yml\n</code></pre> secrets.template.yml<pre><code>duplicati_settings_key: \"\"\nduplicati_ui_password: \"\"\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/duplicati/#env-template","title":".env Template","text":"<pre><code>touch ansible/mistia-nexus/templates/duplicati.env.j2\nnano ansible/mistia-nexus/template/duplicati.env.j2\n</code></pre> duplicati.env.j2<pre><code>DUPLICATI_SETTINGS_KEY={{ duplicati_settings_key }}\nDUPLICATI_UI_PASSWORD={{ duplicati_ui_password }}\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/duplicati/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/duplicati/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/duplicati/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags proxy-reload,duplicati\n</code></pre>"},{"location":"services/duplicati/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/duplicati/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to https://duplicati.mistia.xyz</p> </li> <li> <p>Login using the <code>DUPLICATI_UI_PASSWORD</code> define in the secrets</p> </li> </ol>"},{"location":"services/nextcloud/","title":"Nextcloud","text":"<p>Overview</p> <p>Nextcloud is a self-hosted file sync and collaboration platform that replaces Dropbox and Google services. With Calendar and Contacts apps enabled, it provides complete family organization including file storage, automatic photo sync, shared calendars, and contact synchronization across all devices.</p>"},{"location":"services/nextcloud/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://nextcloud.mistia.xyz https://mistia-nexus.local:10201</p> <p> nextcloud \u00a0\u00a0\u00a0  nextcloud:apache</p> <p> nextcloud-cron \u00a0\u00a0\u00a0  nextcloud:apache</p> <p> nextcloud-db \u00a0\u00a0\u00a0  mariadb:latest</p> <p> nextcloud-redis \u00a0\u00a0\u00a0  redis:alpine</p> Container Host Ports Container Ports Network Host Path / Docker Volume Container Path nextcloud <code>10201</code> <code>80</code> <code>nextcloud-net</code><code>mistia-proxy-net</code> <code>/volume1/docker/nextcloud/data</code><code>/volume1/docker/nextcloud/config</code> <code>/var/www/html</code><code>/var/www/html/config</code> nextcloud-cron <code>N/A</code> <code>80</code> <code>nextcloud-net</code> <code>/volume1/docker/nextcloud/data</code><code>/volume1/docker/nextcloud/config</code> <code>/var/www/html</code><code>/var/www/html/config</code> nextcloud-db <code>N/A</code> <code>3306</code> <code>nextcloud-net</code> <code>/volume1/docker/nextcloud/db</code> <code>/var/lib/mysql</code> nextcloud-redis <code>N/A</code> <code>6379</code> <code>nextcloud-net</code> <code>/volume1/docker/nextcloud/redis</code> <code>/data</code>"},{"location":"services/nextcloud/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/nextcloud/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<p>The <code>mistia-proxy-net</code> network must be available.</p>"},{"location":"services/nextcloud/#nvme-storage","title":"\ud83d\uddc2\ufe0f NVMe Storage","text":"<p>SSH into the NAS to create the NVMe volume</p> <pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <pre><code>sudo mkdir -p /volume1/docker/nextcloud/data\nsudo mkdir -p /volume1/docker/nextcloud/config\nsudo mkdir -p /volume1/docker/nextcloud/db\nsudo mkdir -p /volume1/docker/nextcloud/redis\n</code></pre>"},{"location":"services/nextcloud/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/nextcloud/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>/volume1/docker/nextcloud/\n\u251c\u2500\u2500 data/      # Application files\n\u251c\u2500\u2500 config/    # Configuration files\n\u251c\u2500\u2500 db/        # MariaDB database files\n\u2514\u2500\u2500 redis/     # Redis cache\n\nmistia-nexus/\n\u2514\u2500\u2500 nextcloud/\n    \u251c\u2500\u2500 .env                # Application secrets\n    \u2514\u2500\u2500 docker-compose.yml  # Defines the Nextcloud service, network, and volumes\n</code></pre>"},{"location":"services/nextcloud/#container-directory","title":"\ud83d\udcc1 Container Directory","text":""},{"location":"services/nextcloud/#nextcloud_1","title":"nextcloud","text":"<pre><code>/var/www/html/          # Application files\n/var/www/html/config/   # Configuration and cache\n</code></pre>"},{"location":"services/nextcloud/#nextcloud-cron","title":"nextcloud-cron","text":"<pre><code>/var/www/html/          # Application files\n/var/www/html/config/   # Configuration and cache\n</code></pre>"},{"location":"services/nextcloud/#nextcloud-db","title":"nextcloud-db","text":"<pre><code>/var/lib/mysql/         # Database files\n</code></pre>"},{"location":"services/nextcloud/#nextcloud-redis","title":"nextcloud-redis","text":"<pre><code>/data/                  # Cache and session data\n</code></pre>"},{"location":"services/nextcloud/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  nextcloud:\n    build: .\n    container_name: nextcloud\n    hostname: nextcloud\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '1.50'\n          memory: 2048M\n        reservations:\n          cpus: '0.50'\n          memory: 512M    \n    healthcheck:\n      test: ['CMD', 'curl', '-f', 'http://localhost/status.php']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Nextcloud'\n      - 'com.mistia-nexus.service.type=Cloud'\n    environment:\n      - TZ=Asia/Singapore\n      - MYSQL_HOST=nextcloud-db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=${DB_PASSWORD}\n      - NEXTCLOUD_ADMIN_USER=${ADMIN_USER}\n      - NEXTCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}      \n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.mistia.xyz 192.168.50.4      \n      - REDIS_HOST=nextcloud-redis\n      - REDIS_HOST_PORT=6379      \n      - TRUSTED_PROXIES=192.168.0.0/16 172.16.0.0/12 10.0.0.0/8\n      - OVERWRITEPROTOCOL=https\n      - OVERWRITEHOST=nextcloud.mistia.xyz\n      - PHP_MEMORY_LIMIT=1024M\n      - PHP_UPLOAD_LIMIT=2048M      \n      - APACHE_DISABLE_REWRITE_IP=1\n      - OVERWRITECLIURL=https://nextcloud.mistia.xyz      \n      - NEXTCLOUD_INIT_HTACCESS=true\n      - APACHE_BODY_LIMIT=1073741824\n    volumes:\n      - nextcloud_data:/var/www/html\n      - nextcloud_config:/var/www/html/config\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    restart: unless-stopped\n    ports:\n      - '10201:80'\n    networks:\n      - nextcloud-net\n      - mistia-proxy-net\n\n  nextcloud-cron:\n    build: .\n    container_name: nextcloud-cron\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 1024M\n        reservations:\n          cpus: '0.50'\n          memory: 512M    \n    entrypoint: /cron.sh\n    environment:\n      - TZ=Asia/Singapore\n      - MYSQL_HOST=nextcloud-db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=${DB_PASSWORD}\n      - REDIS_HOST=nextcloud-redis\n      - REDIS_HOST_PORT=6379\n    volumes:\n      - nextcloud_data:/var/www/html\n      - nextcloud_config:/var/www/html/config\n    depends_on:\n      nextcloud:\n        condition: service_healthy\n    restart: unless-stopped\n    networks:\n      - nextcloud-net\n\n  db:\n    image: mariadb:11.4\n    container_name: nextcloud-db\n    hostname: nextcloud-db\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 128M\n    healthcheck:\n      test:\n        [\n          'CMD',\n          'healthcheck.sh',\n          '--connect',\n          '--innodb_initialized'\n        ]\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 60s\n    labels:\n      - 'com.mistia-nexus.service.name=Nextcloud Database'\n      - 'com.mistia-nexus.service.type=Database'\n    environment:\n      - TZ=Asia/Singapore\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=${DB_PASSWORD}\n      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}      \n      - MYSQL_INNODB_BUFFER_POOL_SIZE=256M\n      - MYSQL_INNODB_LOG_FILE_SIZE=64M\n      - MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT=2\n      - MYSQL_INNODB_FLUSH_METHOD=O_DIRECT\n      - MYSQL_QUERY_CACHE_SIZE=32M\n      - MYSQL_QUERY_CACHE_TYPE=1\n      - MYSQL_KEY_BUFFER_SIZE=32M\n      - MYSQL_MAX_CONNECTIONS=151\n    volumes:\n      - nextcloud_db_data:/var/lib/mysql    \n    restart: unless-stopped\n    networks:\n      - nextcloud-net\n\n  redis:\n    image: redis:7-alpine\n    container_name: nextcloud-redis\n    hostname: nextcloud-redis\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.25'\n          memory: 256M\n        reservations:\n          cpus: '0.10'\n          memory: 64M\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Nextcloud Redis Cache'\n      - 'com.mistia-nexus.service.type=Cache'\n    environment:\n      - TZ=Asia/Singapore\n    tmpfs:\n      - /tmp:noexec,nosuid,size=100m\n    volumes:\n      - nextcloud_redis_data:/data\n    command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru --save \"\"\n    restart: unless-stopped\n    networks:\n      - nextcloud-net\n\nvolumes:\n  nextcloud_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /volume1/docker/nextcloud/data\n  nextcloud_config:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /volume1/docker/nextcloud/config\n  nextcloud_db_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /volume1/docker/nextcloud/db\n  nextcloud_redis_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /volume1/docker/nextcloud/redis\n\nnetworks:\n  nextcloud-net:\n    name: nextcloud-net\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/nextcloud/#dockerfile","title":"\ud83d\udc0b Dockerfile","text":"Dockerfile<pre><code>FROM nextcloud:31-apache\n\n# Install smbclient and PHP smbclient extension\nRUN apt-get update &amp;&amp; \\\n  apt-get install -y smbclient libsmbclient-dev &amp;&amp; \\\n  pecl install smbclient &amp;&amp; \\\n  docker-php-ext-enable smbclient &amp;&amp; \\\n  apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"services/nextcloud/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>@nextcloud host nextcloud.mistia.xyz\nhandle @nextcloud {\n    reverse_proxy http://nextcloud:80 {\n        import proxy_headers\n    }\n}\n</code></pre>"},{"location":"services/nextcloud/#ansible","title":"Ansible","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre>"},{"location":"services/nextcloud/#ansible-vault","title":"Ansible Vault","text":"<pre><code>nexus_vault\n</code></pre> <p>Press I to enter <code>Insert Mode</code></p> secrets.yml<pre><code>nextcloud_db_password: \"nextcloud-db-password\"\nnextcloud_db_root_password: \"nextcloud-db-root-password\"\nnextcloud_admin_user: \"nextcloud-admin-user\"\nnextcloud_admin_password: \"nextcloud-admin-password\"\n</code></pre> <p>Press Esc to exit <code>Insert Mode</code></p> <p>Type : W Q and press Enter to save and exit</p>"},{"location":"services/nextcloud/#secrets-template","title":"Secrets Template","text":"<pre><code>nano ansible/mistia-nexus/secrets.template.yml\n</code></pre> secrets.template.yml<pre><code>nextcloud_db_password: \"\"\nnextcloud_db_root_password: \"\"\nnextcloud_admin_user: \"\"\nnextcloud_admin_password: \"\"\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/nextcloud/#env-template","title":".env Template","text":"<pre><code>touch templates/nextcloud.env.j2\nnano template/nextcloud.env.j2\n</code></pre> nextcloud.env.j2<pre><code>DB_PASSWORD={{ nextcloud_db_password }}\nDB_ROOT_PASSWORD={{ nextcloud_db_root_password }}\nADMIN_USER={{ nextcloud_admin_user }}\nADMIN_PASSWORD={{ nextcloud_admin_password }}\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/nextcloud/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/nextcloud/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/nextcloud/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags proxy-reload,nextcloud\n</code></pre>"},{"location":"services/nextcloud/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/nextcloud/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to https://nextcloud.mistia.xyz</p> </li> <li> <p>The admin account will be automatically created using the credentials from <code>.env</code></p> </li> <li> <p>Create additional user accounts for family members:    - Navigate to <code>Users</code> settings    - Add user accounts for each family member</p> </li> </ol>"},{"location":"services/nextcloud/#system-configuration","title":"\ud83e\ude96 System Configuration","text":""},{"location":"services/nextcloud/#server-maintenance-window","title":"Server Maintenance Window","text":"<pre><code>ssh late4ever@mistia-nexus.local\n</code></pre> <p>Set maintenance window to be 1 to 3am</p> <pre><code>docker exec nextcloud php occ config:system:set maintenance_window_start --type=integer --value=1\ndocker exec nextcloud php occ config:system:set maintenance_window_end --type=integer --value=3\n</code></pre> <ol> <li> <p>Navigate to Nextcloud \u00bb Administration Settings \u00bb Basic Settings</p> </li> <li> <p>Set Background Jobs to <code>Cron</code></p> </li> </ol>"},{"location":"services/nextcloud/#run-maintenance-tasks","title":"Run Maintenance Tasks","text":"<pre><code>docker exec nextcloud php occ maintenance:repair --include-expensive\n</code></pre>"},{"location":"services/nextcloud/#set-default-phone-region","title":"Set Default Phone Region","text":"<pre><code>docker exec nextcloud php occ config:system:set default_phone_region --value=\"SG\"\n</code></pre>"},{"location":"services/nextcloud/#email-configuration","title":"Email Configuration","text":"<ol> <li> <p>Navigate to Nextcloud \u00bb Personal settings \u00bb Personal Info</p> </li> <li> <p>Set Email field</p> </li> <li> <p>Navigate to Nextcloud \u00bb Administration Settings \u00bb Basic Settings</p> </li> <li> <p>Email Server</p> <ul> <li>Send mode: <code>SMTP</code></li> <li>Encryption: <code>SSL</code></li> <li>From address: <code>[username]+nextcloud</code> @ <code>[domain.com]</code></li> <li>Server address: <code>smtp.[domain.com]</code> @ [465]</li> <li>Check Authentication required</li> <li>Credential: <code>[username]@[domain.com]</code> <code>[app password]</code></li> <li>Click <code>Save</code></li> </ul> </li> </ol>"},{"location":"services/nextcloud/#external-storage-configuration","title":"\ud83d\uddc2\ufe0f External Storage Configuration","text":"<ol> <li> <p>Navigate to Nextcloud \u00bb Apps \u00bb Dsiabled apps</p> </li> <li> <p>Click <code>Enable</code> for *External storage support*</p> </li> <li> <p>Navigate to Nextcloud \u00bb Administration settings \u00bb External storage</p> </li> <li> <p>Add SMB Share:    - Folder name: <code>Folder Name</code> or <code>/</code> to take over as root files view    - External storage: <code>SMB/CIFS</code>    - Authenticaion: <code>Manually enterd, stored in database</code>    - Configuration:</p> <ul> <li><code>Mistia-Nexus</code></li> <li><code>[personal folder name]</code></li> <li>Available for: <code>nextcloud user</code></li> </ul> </li> </ol> <ul> <li>Folder name: <code>/</code> to take over as root files view</li> <li>External storage: <code>SMB/CIFS</code></li> <li>Authenticaion: <code>Manually enterd, stored in database</code></li> <li>Configuration:<ul> <li><code>Mistia-Nexus</code></li> <li><code>Mistia</code></li> </ul> </li> <li>Available for: <code>All people</code></li> </ul>"},{"location":"services/nextcloud/#mobile-setup","title":"\ud83d\udcf1 Mobile Setup","text":""},{"location":"services/nextcloud/#file-sync-nextcloud-app","title":"File Sync (Nextcloud App)","text":"<ol> <li> <p>Install Nextcloud app from App Store/Play Store</p> </li> <li> <p>Configure connection:    - Server: <code>https://nextcloud.mistia.xyz</code>    - Username: Your Nextcloud username    - Password: Your Nextcloud password</p> </li> <li> <p>Enable Auto Upload for photos and videos:    - Go to <code>Settings</code> in the app    - Enable <code>Auto upload</code>    - Select folders to upload to (e.g., <code>Shared Photos</code>)</p> </li> </ol>"},{"location":"services/nextcloud/#calendar-sync-caldav","title":"Calendar Sync (CalDAV)","text":"<p>Android:</p> <pre><code>Settings \u2192 Accounts \u2192 Add account \u2192 CalDAV\nServer: https://nextcloud.mistia.xyz/remote.php/dav/\nUsername: [your-nextcloud-username]\nPassword: [your-nextcloud-password]\n</code></pre>"},{"location":"services/nextcloud/#contact-sync-carddav","title":"Contact Sync (CardDAV)","text":"<p>Android:</p> <pre><code>Settings \u2192 Accounts \u2192 Add account \u2192 CardDAV\nServer: https://nextcloud.mistia.xyz/remote.php/dav/\nUsername: [your-nextcloud-username]\nPassword: [your-nextcloud-password]\n</code></pre>"},{"location":"services/nextcloud/#contact-migration-from-google","title":"\ud83d\udce7 Contact Migration from Google","text":"<ol> <li> <p>Export from Google Contacts:    - Go to contacts.google.com    - Click <code>Export</code> \u2192 <code>vCard format</code>    - Download the vCard file</p> </li> <li> <p>Import to Nextcloud:    - Navigate to <code>Contacts</code> app in Nextcloud    - Click <code>Import contacts</code>    - Upload the vCard file    - Select the address book to import to</p> </li> <li> <p>Setup device sync:    - Remove Google account from Contacts sync on devices    - Add Nextcloud CardDAV account (see above)    - Your contacts will now sync with Nextcloud</p> </li> </ol>"},{"location":"services/portainer/","title":"Portainer","text":"<p>Overview</p> <p>Portainer is a lightweight management UI that allows you to easily manage your Docker environments by providing a detailed overview of your containers, images, networks, and volumes. This service simplifies the complexity of the command line, making it an essential tool for both beginners and experienced users to visualize and manage their containerized applications.</p>"},{"location":"services/portainer/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://portainer.mistia.xyz https://mistia-nexus.local:10001</p> <p> portainer \u00a0\u00a0\u00a0  portainer/portainer-ce:alpine</p> Host Ports Container Ports Network Host Path Container Path <code>10001</code> <code>8000</code>,<code>9000</code>,<code>9443</code> <code>mistia-proxy-net</code> <code>portainer/data</code><code>/var/run/docker.sock</code> <code>/data</code><code>/var/run/docker.sock</code>"},{"location":"services/portainer/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/portainer/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<p>The <code>mistia-proxy-net</code> network must be available.</p>"},{"location":"services/portainer/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/portainer/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 portainer/\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Portainer service, network, and volumes\n    \u2514\u2500\u2500 data/               # Mapped volume\n</code></pre>"},{"location":"services/portainer/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/\n\u251c\u2500\u2500 data/                   # Portainer's persistent data\n\u2514\u2500\u2500 var/run/docker.sock     # Docker socket for container management\n</code></pre>"},{"location":"services/portainer/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  portainer:\n    image: portainer/portainer-ce:alpine\n    container_name: portainer\n    hostname: portainer\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 128M\n    healthcheck:\n      test: ['CMD-SHELL', 'nc -z -v localhost 9000 || exit 1']\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Portainer'\n      - 'com.mistia-nexus.service.type=Management'\n    environment:\n      - TZ=Asia/Singapore\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./data:/data\n    restart: unless-stopped\n    ports:\n      - 10001:9000\n    networks:\n      - mistia-proxy-net\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/portainer/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>@portainer host portainer.mistia.xyz\nhandle @portainer {\n    reverse_proxy http://portainer:9000 {\n        import proxy_headers\n    }\n}\n</code></pre>"},{"location":"services/portainer/#ansible","title":"Ansible","text":""},{"location":"services/portainer/#ansible-vault","title":"Ansible Vault","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/portainer/#secrets-template","title":"Secrets Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/portainer/#env-template","title":".env Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/portainer/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/portainer/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/portainer/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags proxy-reload,portainer\n</code></pre>"},{"location":"services/portainer/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/portainer/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to https://portainer.mistia.xyz</p> </li> <li> <p>Create an administrator account</p> </li> <li> <p>Select the <code>Local</code> environment and click <code>Connect</code> to manage the local Docker instance</p> </li> </ol>"},{"location":"services/tailscale/","title":"Tailscale","text":"<p>Overview</p> <p>Tailscale is a zero-config VPN that creates a secure, private network between your devices, no matter where they are. It enables remote access to your entire homelab, including LAN devices, and funnels traffic through your home\u2019s ad-blocking DNS, all without opening any firewall ports.</p>"},{"location":"services/tailscale/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://login.tailscale.com/admin/machines</p> <p> tailscale \u00a0\u00a0\u00a0  tailscale/tailscale:latest</p> Host Ports Container Ports Network Host Path Container Path host mode host mode <code>host</code> <code>tailscale/state</code><code>/dev/net/tun</code> <code>/var/lib/tailscale</code><code>/dev/net/tun</code>"},{"location":"services/tailscale/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ol> <li> <p>Create a Tailscale account </p> </li> <li> <p>Navigate to the Tailscale Admin Console \u00bb Settings \u00bb Keys</p> </li> <li> <p>Click <code>Generate auth key...</code>    - Configure the key:    - Description: <code>Mistia-Nexus</code>    - Reusable: <code>Enabled</code>    - Ephemeral: <code>Enabled</code>    - Tags: <code>tags:nas-router</code></p> </li> <li> <p>Click <code>Generate key</code></p> </li> <li> <p>Copy the key</p> </li> </ol> <p>Host Networking</p> <p>This service uses <code>network_mode: host</code>, which gives it direct access to the NAS\u2019s networking stack. This is required for its function as a subnet router and exit node. It does not use the <code>mistia-proxy-net</code>.</p>"},{"location":"services/tailscale/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/tailscale/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 tailscale/\n    \u251c\u2500\u2500 .env                # Application secrets (stores the auth key)\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Tailscale service\n    \u2514\u2500\u2500 state/              # Mapped volume\n</code></pre>"},{"location":"services/tailscale/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/\n\u251c\u2500\u2500 var/lib/tailscale/  # Stores the persistent state and identity of the Tailscale node\n\u2514\u2500\u2500 dev/net/tun         # Allows the container to create a VPN network interface\n</code></pre>"},{"location":"services/tailscale/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  tailscale:\n    image: tailscale/tailscale:latest\n    container_name: tailscale\n    hostname: mistia-nexus\n    init: true\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    cap_add:\n      - net_admin\n      - sys_module\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 256M\n        reservations:\n          cpus: '0.10'\n          memory: 64M\n    healthcheck:\n      test: [\"CMD\", \"tailscale\", \"status\"]\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Tailscale'\n      - 'com.mistia-nexus.service.type=VPN'\n    environment:\n      - TZ=Asia/Singapore\n      - TS_STATE_DIR=/var/lib/tailscale\n      - TS_AUTHKEY=${TS_AUTHKEY}\n      - TS_EXTRA_ARGS=--advertise-routes=192.168.50.0/24 --advertise-exit-node --accept-dns=false\n    volumes:\n      - ./state:/var/lib/tailscale\n      - /dev/net/tun:/dev/net/tun\n    network_mode: host\n    restart: unless-stopped\n</code></pre>"},{"location":"services/tailscale/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/tailscale/#ansible","title":"Ansible","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre>"},{"location":"services/tailscale/#ansible-vault","title":"Ansible Vault","text":"<pre><code>nexus_vault\n</code></pre> <p>Press I to enter <code>Insert Mode</code></p> secrets.yml<pre><code>ts_authkey: \"tailscale-auth-key\"\n</code></pre> <p>Press Esc to exit <code>Insert Mode</code></p> <p>Type : W Q and press Enter to save and exit</p>"},{"location":"services/tailscale/#secrets-template","title":"Secrets Template","text":"<pre><code>nano ansible/mistia-nexus/secrets.template.yml\n</code></pre> secrets.template.yml<pre><code>ts_authkey: \"\"\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/tailscale/#env-template","title":".env Template","text":"<pre><code>touch templates/tailscale.env.j2\nnano template/tailscale.env.j2\n</code></pre> tailscale.env.j2<pre><code>TS_AUTHKEY={{ \"tailscale-auth-key\" }}\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/tailscale/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre>"},{"location":"services/tailscale/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/tailscale/#deployment","title":"\u2728 Deployment","text":"<p>Open the repo in <code>WSL terminal</code></p> <pre><code>cd ~/Mistia-Labs/\nsource tools/activate.sh\n</code></pre> <pre><code>nexus-deploy --tags tailscale\n</code></pre>"},{"location":"services/tailscale/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/tailscale/#authorize-node-and-routes","title":"\u2699\ufe0f Authorize Node and Routes","text":"<ol> <li> <p>Navigate to Tailscale Admin Console \u00bb Machines</p> </li> <li> <p>You will see your new <code>mistia-nexus</code> node.</p> </li> <li> <p>Click the three-dot menu <code>...</code> next to the machine and select <code>Edit route settings...</code></p> <ul> <li>Approve the advertised features:<ul> <li>Check 192.168.50.0/24</li> <li>Check Use as exit node</li> </ul> </li> <li>Click <code>Save</code></li> </ul> </li> </ol>"},{"location":"services/tailscale/#configure-global-dns","title":"\ud83d\udd17 Configure Global DNS","text":"<p>To enable network-wide ad-blocking for all your remote devices, configure your tailnet to use your AdGuard Home instance.</p> <ol> <li> <p>Navigate to Tailscale Admin Console \u00bb DNS</p> </li> <li> <p>Under the <code>Nameservers</code> section, click <code>Add nameserver</code> and select <code>Custom</code></p> </li> <li> <p>Enter the local IP address of your AdGuard Home container: 192.168.50.2</p> </li> <li> <p>Click <code>Save</code></p> </li> <li> <p>Toggle on Override local DNS. This ensures your remote devices use your AdGuard Home for DNS queries instead of whatever network they are connected to</p> </li> </ol>"},{"location":"services/tailscale/#connect-client-devices","title":"\ud83d\udcf1 Connect Client Devices","text":"<p>On your phone, laptop, or other remote devices:</p> <ol> <li>Install the Tailscale client and log in.</li> <li>In the client settings, select Exit Node\u2026.</li> <li>Choose <code>mistia-nexus-tailscale</code> from the list.</li> </ol> <p>Your device will now route all its internet traffic through your home network, gaining the full benefits of your AdGuard Home setup, and will be able to access all local devices (like Sonos) as if it were right at home.</p>"},{"location":"services/uptime-kuma/","title":"\ud83d\udc3b Uptime Kuma","text":"<p>Overview</p> <p>Uptime Kuma is a fancy, easy-to-use, self-hosted monitoring tool. It allows you to monitor the uptime for your HTTP(s)/TCP/Ping services and receive notifications, providing a clear dashboard of your homelab\u2019s health.</p>"},{"location":"services/uptime-kuma/#service-information","title":"\ud83d\udcd1 Service Information","text":"<p> https://kuma.mistia.xyz http://mistia-nexus.local:10004</p> <p> kuma \u00a0\u00a0\u00a0  louislam/uptime-kuma:1</p> Host Ports Container Ports Network Host Path Container Path <code>10004</code> <code>3001</code> <code>mistia-proxy-net</code> <code>uptime-kuma/data</code><code>/var/run/docker.sock</code> <code>/app/data</code><code>/var/run/docker.sock:ro</code>"},{"location":"services/uptime-kuma/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"services/uptime-kuma/#network-requirements","title":"\ud83c\udf10 Network Requirements","text":"<p>The <code>mistia-proxy-net</code> network must be available.</p>"},{"location":"services/uptime-kuma/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"services/uptime-kuma/#host-directory","title":"\ud83d\udcc2 Host Directory","text":"<pre><code>mistia-nexus/\n\u2514\u2500\u2500 uptime-kuma/\n    \u251c\u2500\u2500 docker-compose.yml  # Defines the Uptime Kuma service, network, and volumes\n    \u2514\u2500\u2500 data/               # Mapped volume for persistent data\n</code></pre>"},{"location":"services/uptime-kuma/#container-directory","title":"\ud83d\udcc1 Container Directory","text":"<pre><code>/app/data     # Uptime Kuma's persistent data (database, settings)\n</code></pre>"},{"location":"services/uptime-kuma/#docker-compose","title":"\ud83d\udc0b Docker Compose","text":"docker-compose.yml<pre><code>services:\n  uptime-kuma:\n    image: louislam/uptime-kuma:1\n    container_name: uptime-kuma\n    hostname: uptime-kuma\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '10m'\n        max-file: '3'\n    security_opt:\n      - no-new-privileges:true\n    deploy:\n      resources:\n        limits:\n          cpus: '0.75'\n          memory: 1024M\n        reservations:\n          cpus: '0.25'\n          memory: 256M\n    healthcheck:\n      test: [\"CMD-SHELL\", \"node /app/extra/healthcheck.js\"]\n      interval: 30s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    labels:\n      - 'com.mistia-nexus.service.name=Uptime Kuma'\n      - 'com.mistia-nexus.service.type=Monitoring'\n    environment:\n      - TZ=Asia/Singapore\n      - UPTIME_KUMA_PORT=3001\n    ports:\n      - \"10004:3001\"\n    volumes:\n      - ./data:/app/data\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: unless-stopped\n    networks:\n      - mistia-proxy-net\n\nnetworks:\n  mistia-proxy-net:\n    name: mistia-proxy-net\n    external: true\n</code></pre>"},{"location":"services/uptime-kuma/#reverse-proxy","title":"\ud83d\udd00 Reverse Proxy","text":"Caddyfile<pre><code>@kuma host kuma.mistia.xyz\nhandle @kuma {\n    reverse_proxy http://uptime-kuma:3001 {\n        import proxy_headers\n    }\n}\n</code></pre>"},{"location":"services/uptime-kuma/#ansible","title":"Ansible","text":""},{"location":"services/uptime-kuma/#ansible-vault","title":"Ansible Vault","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/uptime-kuma/#secrets-template","title":"Secrets Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/uptime-kuma/#env-template","title":".env Template","text":"<pre><code>not needed\n</code></pre>"},{"location":"services/uptime-kuma/#deploy-services-playbook","title":"Deploy-Services Playbook","text":"<pre><code>nano ansible/mistia-nexus/deploy-services.yml\n</code></pre> deploy-services.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/uptime-kuma/#dns-rewrite-entry","title":"DNS Rewrite Entry","text":"<pre><code>nano ansible/group_vars/all/dns.yml\n</code></pre> dns.yml<pre><code>\n</code></pre> <p>Ctrl+X Y Enter \u00a0\u00a0\u00a0 to save and exit</p>"},{"location":"services/uptime-kuma/#deployment","title":"\u2728 Deployment","text":"<pre><code>nexus-deploy --tags proxy-reload,uptime-kuma\n</code></pre>"},{"location":"services/uptime-kuma/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":""},{"location":"services/uptime-kuma/#account-setup","title":"\ud83e\udeaa Account Setup","text":"<ol> <li> <p>Navigate to https://kuma.mistia.xyz</p> </li> <li> <p>Create an administrator account</p> </li> <li> <p>Start adding your services as monitors. A good starting point is to add all the <code>*.mistia.xyz</code> URLs for your core services</p> </li> </ol>"}]}